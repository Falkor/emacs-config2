;; ~/.emacs.d/config.el -- Emacs configurations

;; Generated by Emacs Modular Configuration version 0.1
;; DO NOT EDIT THIS FILE.
;; Edit the files under '~/.emacs.d/config' directory tree, 
;; then run within emacs 'M-x emc-merge-config-files'

;; ############################################################################
;; Config file: ~/.emacs.d/config/3_bindings/global.el
;; ----------------------------------------------------------------------
;; File: bindings/global.el - setup my gloabl key bindings in emacs
;;       Part of my emacs configuration (see ~/.emacs or init.el)
;;
;; Creation:  08 Jan 2010
;; Time-stamp: <Dim 2014-09-21 16:20 svarrette>
;;
;; Copyright (c) 2010-2014 Sebastien Varrette <Sebastien.Varrette@uni.lu>
;;               http://varrette.gforge.uni.lu
;;
;; More information about Emacs Lisp:
;;              http://www.emacswiki.org/emacs/EmacsLisp
;; ----------------------------------------------------------------------
;; This file is NOT part of GNU Emacs.
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;; ----------------------------------------------------------------------
(require 'use-package)

;; === Always indent on return ===
(global-set-key (kbd "RET") 'newline-and-indent)

;; Use helm to open files / recentf to open recent files
;;(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x C-r") 'helm-recentf)
(global-set-key (kbd "C-x C-g") 'helm-do-grep)

;; (global-set-key (kbd "C-x C-g") 'helm-git-find-file)


;; === Another comment binding (also M-;) ===
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)

;; === Git stuff ===
(global-set-key (kbd "C-x g") 'magit-status)

;; === Buffer switching ===
;; C-x b permits to switch among the buffer by entering a buffer name,
;; with completion.
;; See http://www.emacswiki.org/emacs/IswitchBuffers
(require 'iswitchb)
(iswitchb-mode t)
;; to ignore the *...* special buffers from the list
(setq iswitchb-buffer-ignore '("^ " "*Buffer"))

;; Move from one buffer to another using 'C-<' and 'C->'
;;(load "cyclebuffer" nil 't)
;;(global-set-key (kbd "C-<") 'cyclebuffer-forward)
;;(global-set-key (kbd "C->") 'cyclebuffer-backward)
(global-set-key (kbd "C-<") 'previous-buffer)
(global-set-key (kbd "C->") 'next-buffer)

;; === helm ===
(global-set-key (kbd "C-c h") 'helm-mini)
(global-set-key (kbd "M-x")   'helm-M-x)

;; === Window switching ===
(global-set-key [C-prior] 'other-window)
(global-set-key [C-next]  'other-window)

;; === Font size ===
;; I may prefer C-+ and C-- for window enlarge/schrink
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)

;; === Multi speed mouse scrolling ===
;; scroll:         normal speed
;; Ctrl + scroll:  high speed
;; Shift + scroll: low  speed
(defun up-slightly () (interactive) (scroll-up 5))
(defun down-slightly () (interactive) (scroll-down 5))
(global-set-key [mouse-4] 'down-slightly)
(global-set-key [mouse-5] 'up-slightly)

(defun up-one () (interactive) (scroll-up 1))
(defun down-one () (interactive) (scroll-down 1))
(global-set-key [S-mouse-4] 'down-one)
(global-set-key [S-mouse-5] 'up-one)

(defun up-a-lot () (interactive) (scroll-up))
(defun down-a-lot () (interactive) (scroll-down))
(global-set-key [C-mouse-4] 'down-a-lot)
(global-set-key [C-mouse-5] 'up-a-lot)

;; === Navigation ===
(global-set-key [kp-home]  'beginning-of-buffer) ; [Home]
(global-set-key [home]     'beginning-of-buffer) ; [Home]
(global-set-key [kp-end]   'end-of-buffer)       ; [End]
(global-set-key [end]      'end-of-buffer)       ; [End]

;; goto next error (raised in the compilation buffer typically)
(global-set-key (kbd "C-x n") 'next-error)
(global-set-key (kbd "C-x p") 'previous-error)

(global-set-key (kbd "M-n") 'goto-line)          ; goto line number

;; === ECB / NerdTree like ===
;; (use-package  neotree
;; 			  :bind "f1" 'neotree-toggle)
(require 'neotree)
(require 'find-file-in-project)
(global-set-key [(f1)] 'neotree-project-dir) ; open neotree at the git root dir
(global-set-key [(f2)] 'ecb-toggle) ; Activate ECB (see ~/.emacs.d/init-cedet)

;; === Shell pop ===
(global-set-key [(f3)]     'shell-pop)

;; Speedbar

                                        ;(global-set-key [(f4)] 'speedbar-get-focus)      ; jump to speedbar frame
;;(require 'sr-speedbar)
;;(speedbar 1)

;; (global-set-key [(f4)] 'sr-speedbar-toggle)       ; jump to speedbar frame

;; find matching parenthesis (% command in vim: Go to the matching parenthesis,
;; if on parenthesis; otherwise, insert '%')
;; see ~/.emacs.d/init-defuns.el
;; in practice, it's annoying when writing a C code with printf format so I
;; decided to rebind it to something different that '%'
(global-set-key (kbd "C-c C-p") 'match-paren)

;; Jump to a definition in the current file. (This is awesome.)
(global-set-key (kbd "C-x C-i") 'ido-imenu)

;; === Compilation ===
(use-package smart-compile
  :bind ("C-x C-e" . smart-compile))
;;(global-set-key (kbd "C-x C-e") 'smart-compile)
;;(define-key ruby-mode-map [remap ruby-send-last-sexp ] nil)

;; === Kill this buffer ===
(global-set-key (kbd "C-q") 'kill-this-buffer)

;; === Launch a shell ===
(global-set-key (kbd "C-!") 'shell)

;; === Re-indent the full file (quite useful) ===
(global-set-key (kbd "C-c i") 'indent-buffer)   ;
(global-set-key (kbd "C-c n") 'cleanup-buffer)  ;



;; === yank and indent copied region ===
(global-set-key (kbd "M-v")  'yank-and-indent)


;; === Search [and replace] ===
                                        ; Use regex searches by default.
(global-set-key (kbd "C-s")   'isearch-forward)
(global-set-key (kbd "\C-r")  'isearch-backward)
(global-set-key (kbd "C-M-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-M-r") 'isearch-backward-regexp)
(global-set-key (kbd "M-q")   'query-replace)


;; === Instant messaging ===
;; see http://www.emacswiki.org/emacs/CategoryChatClient
;; TO BE TRIED LATER
                                        ;(global-set-key (kbd "C-c j") (lambda () (interactive) (switch-or-start 'jabber-connect "*-jabber-*")))
                                        ;(global-set-key (kbd "C-c M-j") 'jabber-disconnect)

                                        ;(global-set-key (kbd "C-c i")
                                        ;               (lambda () (interactive)
                                        ;                 (switch-or-start (lambda () (rcirc-connect "irc.freenode.net"))
                                        ;                                  "*irc.freenode.net*")))


;; === Emacs Org ===
;; An Emacs Mode for Notes, Project Planning, and Authoring
;; see http://www.emacswiki.org/emacs/OrgMode
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

;; === Flyspell ===
(use-package ispell
             :bind (("C-c C-i c" . ispell-comments-and-strings)
                    ("C-c C-i d" . ispell-change-dictionary)
                    ("C-c C-i k" . ispell-kill-ispell)
                    ("C-c C-i m" . ispell-message)
                    ("C-c C-i r" . ispell-region)))

(use-package flyspell
             :bind (("C-c C-i b" . flyspell-buffer)
                    ("C-c C-i f" . flyspell-mode))
             :config
             (define-key flyspell-mode-map [(control ?.)] nil))

;; === Yasnippet ===
;; see config/modes/yasnippets for the setup
;; Normally bind to C-RET and M-RET








;; ===============================
;;  BINDINGS INDUCED BY SUB-MODES
;; ===============================

;; * comment and uncomment a region in a buffer is done via 'M-;'

;; * LaTeX-mode: see AucTeX manual.
;;   Some additionnal notes:
;;   - make a LaTeX reference (to a label) by pressing `C-c )'
;;   - insert a label by pressing `C-c (' (or `C-('
;;   - insert a citation by pressing `C-c [' (or `C-['
;;   - hit `C-c ='; the buffer will split into 2 and in the top half you
;;     will see a TOC, hitting `l' there will show all the labels and cites.
;;   - M-<ret> invoke a template from Yasnippet
;;   - C-<ref> insert a \item

;; * C-x d    open dired (for directory browsing), see ~/.emacs.d/dired-refcard.gnu.pdf
;;            Note: I bind 'p' once on a file to run the 'open' command on this file
;;            See ~/.emacs.d/init-emodes.el (section Dired)

;; * SVN: see menu Tools/Version Control (C-x v v to commit for instance)

;; * GIT (i.e. magit): see ~/.emacs.d/init-emodes.el

;; * Programming stuff:
;;   Most useful:
;;    - 'C-t C-t' to invoke a template from tempo (see ~/.emacs.d/tempo-c-cpp.el)
;;    - 'M-<ret>' to invoke a template from Yasnippet (see ~/.emacs.d/init-emodes.el)
;;    - 'C-<ret>' to invoke semantic menu (see ~/.emacs.d/init-cedet.el)

;; * CEDET: see ~/.emacs.d/init-cedet.el

;; * nxHtml: see ~/.emacs.d/init-emodes.el, in particular C-<ret> is bind in
;;  this case to popup the complete-tag menu very useful when editing some
;;  [x]html file





;;(provide 'init-bindings)
;; ----------------------------------------------------------------------
;; eof
;;
;; Local Variables:
;; mode: lisp
;; End:
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/3_bindings/mac.el
;; Special configuration for Mac 

;; (Aquamacs
(when is-mac
  (setq
   ns-command-modifier 'meta         ; Apple/Command key is Meta
   ns-alternate-modifier nil         ; Option is the Mac Option key
   ;;ns-use-mac-modifier-symbols  nil  ; display standard Emacs (and not standard Mac) modifier symbols)
   ))

;;  (require 'redo)
;;  (require 'mac-key-mode)
;;  (mac-key-mode 1)
;;  (setq
;;   ns-command-modifier 'meta         ; Apple/Command key is Meta
;;   ns-alternate-modifier nil         ; Option is the Mac Option key
;;   ;;ns-use-mac-modifier-symbols  nil  ; display standard Emacs (and not standard Mac) modifier symbols)
;;   )
;;  )
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/3_bindings/ruby.el
;; -*- mode: lisp; -*-

(eval-after-load 'ruby-mode
  '(progn
	 (define-key ruby-mode-map (kbd "C-c t") 'ruby-jump-to-other)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/2_modes/auctex.el
;; -*- mode: lisp; -*-
;; === LaTeX ===


;; new setup
(use-package tex-site
  :load-path "site-lisp/auctex/preview/"
  :defines (latex-help-cmd-alist latex-help-file)
  :mode ("\\.tex\\'" . latex-mode)
  :config
  (progn
    (defun latex-help-get-cmd-alist ()  ;corrected version:
      "Scoop up the commands in the index of the latex info manual.
   The values are saved in `latex-help-cmd-alist' for speed."
      ;; mm, does it contain any cached entries
      (if (not (assoc "\\begin" latex-help-cmd-alist))
          (save-window-excursion
            (setq latex-help-cmd-alist nil)
            (Info-goto-node (concat latex-help-file "Command Index"))
            (goto-char (point-max))
            (while (re-search-backward "^\\* \\(.+\\): *\\(.+\\)\\." nil t)
              (let ((key (buffer-substring (match-beginning 1) (match-end 1)))
                    (value (buffer-substring (match-beginning 2)
                                             (match-end 2))))
                (add-to-list 'latex-help-cmd-alist (cons key value))))))
      latex-help-cmd-alist)

    (use-package latex-mode
      :defer t
      :config
      (progn
        (use-package preview)
        (use-package ac-math)

        (defun ac-latex-mode-setup ()
          (nconc ac-sources
                 '(ac-source-math-unicode ac-source-math-latex
                                          ac-source-latex-commands)))

        (add-to-list 'ac-modes 'latex-mode)
        (add-hook 'latex-mode-hook 'ac-latex-mode-setup)

        (info-lookup-add-help :mode 'latex-mode
                              :regexp ".*"
                              :parse-rule "\\\\?[a-zA-Z]+\\|\\\\[^a-zA-Z]"
                              :doc-spec '(("(latex2e)Concept Index" )
                                          ("(latex2e)Command Index")))))))


;; OLD setup
;; ;; Load AucTeX : see http://www.gnu.org/software/auctex/
;; ;; Debian/ubuntu: apt-get install auctex
;; ;; Mac OS X: preinstalled on Carbon Emacs
;; ;;(load "auctex.el" nil t t)
;; (require 'tex-site)

;; ;; AUC TeX will will assume the file is a master file itself
;; ;;(setq-default TeX-master t)

;; ;;(setq TeX-auto-save t)

;; (setq TeX-parse-self t) ; enable parse on load (if no style hook is found for the file)

;; (setq TeX-directory ".")
;; (setq TeX-mode-hook '((lambda () (setq abbrev-mode t))))

;; (setq-default TeX-PDF-mode t)         ; use PDF mode by default (instead of DVI)

;; ;;(add-hook 'LaTeX-mode-hook 'auto-fill-mode)
;; (add-hook 'LaTeX-mode-hook 'flyspell-mode)
;; (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
;; (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

;; ;; number of spaces to add to the indentation for each `\begin' not matched by a
;; ;; `\end'
;; (setq LaTeX-indent-level 4)

;; ;; number of spaces to add to the indentation for `\item''s in list
;; ;; environments
;; (setq LaTeX-item-indent -2)             ; -4

;; ;; number of spaces to add to the indentation for each `{' not matched
;; ;; by a `}'
;; (setq TeX-brace-indent-level 2)         ; 4

;; ;; auto-indentation (suggested by the AUCTeX manual -- instead of adding
;; ;; a local key binding to `RET' in the `LaTeX-mode-hook')
;; (setq TeX-newline-function 'newline-and-indent)

;; ;; don't show output of TeX compilation in other window
;;                                         ;(setq TeX-show-compilation nil)

;; ;; Directory containing automatically generated TeX information.
;; ;; Must end with a slash
;; ;;(setq TeX-auto-global "~/.emacs.d/auctex-auto-generated-info/")
;; ;;(setq TeX-auto-local  "~/.emacs.d/auctex-auto-generated-info/")

;; ;; RefTex: manage cross references, bibliographies, indices, document navigation
;; ;; and a few other things
;; ;; see http://www.emacswiki.org/emacs/RefTeX
;; (require 'reftex)

;; ;; make a LaTeX reference (to a label) by pressing `C-c )'
;; ;; insert a label by pressing `C-c (' (or `C-('
;; ;; insert a citation by pressing `C-c [' (or `C-['

;; ;; hit `C-c ='; the buffer will split into 2 and in the top half you
;; ;; will see a TOC, hitting `l' there will show all the labels and cites.

;; (add-hook 'LaTeX-mode-hook 'turn-on-reftex) ; with AUCTeX LaTeX mode
;; (setq reftex-plug-into-AUCTeX t)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/2_modes/autopair.el
;; ==============================================================
;; Autopair: Automagically pair braces and quotes like TextMate
;; see http://code.google.com/p/autopair/ or
;; http://www.emacswiki.org/emacs/AutoPairs
;; ==============================================================
;;(require 'autopair)

(use-package autopair
  :commands (autopair-global-mode)
  :config
  (progn
	(autopair-global-mode) ;; enable autopair in all buffers
	(setq autopair-autowrap t))
  :bind ("C-j" . autopair-newline))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/2_modes/font-lock.el
;; -*- mode: lisp; -*-
;; Time-stamp: <Ven 2014-09-19 11:22 svarrette>
;;
;; =================================================================
;; Font Lock configuration
;; Note: minor mode, always local to a particular buffer, which
;; highlights (or “fontifies”) the buffer contents according to the
;; syntax of the text you are editing.
;; =================================================================
;; Enable syntax highlighting for older Emacsen that have it off
(if (fboundp 'global-font-lock-mode)
    (global-font-lock-mode     1)    ; GNU Emacs
  (setq font-lock-auto-fontify t))   ; XEmacs

(setq font-lock-maximum-decoration t)

;; Obsolete in emacs 24
;; (setq font-lock-maximum-size       nil)

(setq font-lock-support-mode 'jit-lock-mode)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/2_modes/helm.el
;; Configure helm mode
;; see http://emacs-helm.github.io/helm/
;;(helm-mode 1)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/2_modes/ido.el
;; ido

(ido-mode t)
(setq
 confirm-nonexistent-file-or-buffer nil
 ido-enable-flex-matching t
 ido-use-virtual-buffers t)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/2_modes/markdown.el
;; -*- mode: lisp; -*-
;; === Markdown ===
;; see http://jblevins.org/projects/markdown-mode/
;;(require 'markdown-mode)

(defun markdown-preview-file ()
      "run Marked on the current file and revert the buffer"
      (interactive)
      (shell-command
       (format "open -a /Applications/Marked\ 2.app %s"
               (shell-quote-argument (buffer-file-name)))))

(use-package markdown-mode
  :mode (("\\.md\\'"    . markdown-mode)
		 ("\\.mdown\\'" . markdown-mode))
  :init
  (progn
	(setq markdown-command "pandoc --smart -f markdown -t html")
	(setq markdown-css-path (expand-file-name "markdown.css" emacs-root)))
  :bind ("C-x M" . markdown-preview-file))


;; (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
;; (add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))

;; (add-hook 'markdown-mode-hook
;;           (lambda ()
;;             (visual-line-mode t)
;;             (writegood-mode t)
;;             (flyspell-mode t)))

;; 
;; 
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/2_modes/org.el
;; Settings for org-mode
;; See http://www.aaronbedra.com/emacs.d/#org-mode

;; === Settings ===
;; Enable logging when tasks are complete. This puts a time-stamp on the
;; completed task. Since I usually am doing quite a few things at once, I added
;; the INPROGRESS keyword and made the color blue. Finally, enable flyspell-mode
;; and writegood-mode when org-mode is active.

(setq org-log-done t
      org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
      org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold))))
(add-hook 'org-mode-hook
          (lambda ()
            (flyspell-mode)))
(add-hook 'org-mode-hook
          (lambda ()
            (writegood-mode)))

;; === org-agenda ===

(setq org-rootdir "~/Dropbox/SyncFolder/org/")

(setq org-agenda-show-log t
      org-agenda-todo-ignore-scheduled t
      org-agenda-todo-ignore-deadlines t)
(setq org-agenda-files (concat org-rootdir "personal.org"))
;; (setq org-agenda-files (list "~/Dropbox/org/personal.org"
;;                              "~/Dropbox/org/groupon.org"))

;; === org-habbit ===
(require 'org)
(require 'org-install)
(require 'org-habit)
(add-to-list 'org-modules "org-habit")
(setq org-habit-preceding-days 7
      org-habit-following-days 1
      org-habit-graph-column 80
      org-habit-show-habits-only-for-today t
      org-habit-show-all-today t)


;; === org-babel ===
;; org-babel is a feature inside of org-mode that makes this document possible.
;; It allows for embedding languages inside of an org-mode document with all the
;; proper font-locking. It also allows you to extract and execute code. It isn't
;; aware of Clojure by default, so the following sets that up.
(require 'ob)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((sh . t)
   (dot . t)
   (ruby . t)))

(add-to-list 'org-src-lang-modes (quote ("dot". graphviz-dot)))

(defvar org-babel-default-header-args:clojure
  '((:results . "silent") (:tangle . "yes")))

(defun org-babel-execute:clojure (body params)
  (lisp-eval-string body)
  "Done!")

(provide 'ob-clojure)

(setq org-src-fontify-natively t
      org-confirm-babel-evaluate nil)

(add-hook 'org-babel-after-execute-hook (lambda ()
                                          (condition-case nil
                                              (org-display-inline-images)
                                            (error nil)))
          'append)


;; ==== org-abbrev ===

(add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))

(define-skeleton skel-org-block-elisp
  "Insert an emacs-lisp block"
  ""
  "#+begin_src emacs-lisp\n"
  _ - \n
  "#+end_src\n")

(define-abbrev org-mode-abbrev-table "selisp" "" 'skel-org-block-elisp)

(define-skeleton skel-header-block
  "Creates my default header"
  ""
  "#+TITLE: " str "\n"
  "#+AUTHOR: Aaron Bedra\n"
  "#+EMAIL: aaron@aaronbedra.com\n"
  "#+OPTIONS: toc:3 num:nil\n"
  "#+STYLE: <link rel=\"stylesheet\" type=\"text/css\" href=\"http://thomasf.github.io/solarized-css/solarized-light.min.css\" />\n")

(define-abbrev org-mode-abbrev-table "sheader" "" 'skel-header-block)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/2_modes/ruby.el
;; -*- mode: lisp; -*-

(setq auto-mode-alist
      (append
       '(("\\.rake$"        . ruby-mode)
         ("\\.gemspec$"     . ruby-mode)
         ("\\.rb$"          . ruby-mode)
         ("Rakefile$"       . ruby-mode)
         ("Gemfile$"        . ruby-mode)
         ("Capfile$"        . ruby-mode)
         ("Vagrantfile"     . ruby-mode))
       auto-mode-alist))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/2_modes/smart-tabs.el
;; === Smart Tabs ===
;; see http://www.emacswiki.org/emacs/SmartTabs

(smart-tabs-insinuate 'c 'javascript 'ruby 'python)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/2_modes/web.el
;; -*- mode: lisp; -*-
;; ===== Web management =====

(add-to-list 'auto-mode-alist '("\\.hbs$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb$" . web-mode))


;; Webgen (static website generation)
;; see http://webgen.rubyforge.org/
;; Webgen mode: http://www.emacswiki.org/emacs/WebgenMode
;; (require 'webgen-mode nil t)
;; (add-to-list 'auto-mode-alist '("\\.page$" .     (lambda () (markdown-mode) (webgen-mode))))
;; (add-to-list 'auto-mode-alist '("\\.template$" . (lambda () (html-mode)     (webgen-mode))))
;;(add-to-list 'auto-mode-alist '("[Mm]etainfo$" . (lambda () (text-mode)     (webgen-mode))))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/2_modes/yasnippet.el
;; -*- mode: lisp; -*-

;; === Yasnippet ===
;; Templates using Yasnippet: Yet Another Snippet extension for Emacs.
;; see http://www.emacswiki.org/emacs/Yasnippet and http://yasnippet.googlecode.com
;; Installation notes: see README

;; Classical setup
;; (require 'yasnippet)
;; (yas-global-mode 1)
;; (bind-keys*
;;  ("C-<return>" . yas-expand)
;;  ("M-<return>" . yas-expand))

;; Advanced setup with [use-package](https://github.com/jwiegley/use-package)
(use-package yasnippet
  :commands (yas-global-mode yas-minor-mode yas-expand)
  :mode ("/\\.emacs\\.d/snippets/" . snippet-mode)
  :init (yas-global-mode 1)
  :config
  (progn
	(setq yas-verbosity 0)
	;; (setq yas-snippet-dirs (concat emacs-root "snippets"))
	;; (yas-load-directory yas-snippet-dirs)
	)
  :bind (("C-<return>" . yas-expand)
		 ("M-<return>" . yas-expand)))


;;(yas/initialize)

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/auto-insert.el
;; ========================================================
;; Auto-insert: automatic insertion of text into new files
;; ========================================================

;;(require 'auto-insert-tkld)    ; see ~/.emacs.d/site-lisp/auto-insert-tkld.el
;; (autoload 'auto-insert-tkld
;;   "auto-insert-tkld" "Manage auto insertion of new file" t)
(use-package auto-insert-tkld
  :init
  (progn
	(setq auto-insert-path (cons (concat emacs-root "auto-insert") auto-insert-path))
	(setq auto-insert-automatically t)
	)
  )
;; doc:  ~/.emacs.d/site-lisp/auto-insert-tkld.pdf

;; trick to abstract the personal web page
;;(setq auto-insert-organisation  user-www)

;; associate file extention to a template name
(setq auto-insert-alist
      '(
        ("\\.tex$"         . "LaTeX")            ; TeX or LaTeX
        ("\\.bib$"         . "BibTeX")           ; BibTeX
        ("\\.sty$"         . "LaTeX Style")      ; LaTeX Style
        ("\\.el$"          . "Emacs Lisp")       ; Emacs Lisp
        ("\\.java$"        . "Java")             ; Java
        ("\\App.java$"     . "JavaSwing")        ; Java Swing app
        ("[Tt]ools.h"      . "Tools C++")        ; Useful functions in C/C++
        ("\\Logs.cpp"      . "Logs C++")         ; Macros for logs/debugging
        ("\\Logs.h[+p]*"   . "Logs C++ Include") ; " header file
        ("\\.c$"           . "C")                ; C
        ("\\.h$"           . "C Include")        ; C header file
        ("\\.cxx$"         . "C++")              ; C++
        ("\\.c\\+\\+$"     . "C++")              ;
        ("\\.cpp$"         . "C++")              ;
        ("\\.cc$"          . "C++")              ;
        ("\\.C$"           . "C++")              ;
        ("[Mm]akefile$"    . "Makefile")         ; Makefile
        ("[Mm]akefile.am$" . "Makefile.am")      ; Makefile.am (Automake)
        ("\\.md$"          . "Text")             ; Text
        ("\\.txt$"         . "Text")             ; Text
        ("\\.gpg$"         . "GPG")              ; GPG 
        ("[Rr]eadme$"      . "Readme")           ; Readme
        ("README$"         . "Readme")           ;
        ("\\.sh$"          . "Shell")            ; Shell
        ("\\.csh$"         . "Shell")            ;
        ("\\.tcsh$"        . "Shell")            ;
        ("\\.html"         . "Html")             ; HTML
        ("\\.wml"          . "WML")              ; WML (Website Meta Language)
        ("\\.php"          . "PHP")              ; PHP
        ("\\.gnuplot"      . "Gnuplot")          ; Gnuplot
        ("\\.pl$"          . "Perl")             ; Perl
        ("\\.pm$"          . "Perl Module")      ; PerlModule
        ("\\.t$"           . "Perl Test")        ; Perl Test script
        ("\\.pp$"          . "Puppet")           ; Puppet manifest
        ("\\.rb$"          . "Ruby")             ; Ruby
        ("\\.R$"           . "R")                ; R
        ("\\.admission_rule[s]?$" . "OAR")              ; OAR admission rule
        (""                . "Shell") ; Shell (by default: assume a shell template)
        ))
;; now associate a template name to a template file
(setq auto-insert-type-alist
      '(
        ("LaTeX"       . "insert.tex")
        ("BibTeX"      . "insert.bib")
        ("LaTeX Style" . "insert.sty")
        ("Emacs Lisp"  . "insert.el")
        ("Java"        . "insert.java")
        ("JavaSwing"   . "insertApp.java")
        ("C"           . "insert.c")
        ("C Include"   . "insert.h")
        ("C++"         . "insert.cpp")
        ("Tools C++"   . "insert.tools_cpp.h")
        ("Logs C++"    . "insert.logs.cpp")
        ("Logs C++ Include" . "insert.logs.h")
        ("Makefile"    . "insert.makefile")
        ("Makefile.am" . "insert.makefile.am")
        ("Text"        . "insert.md")
        ("GPG"         . "insert.gpg")
        ("Readme"      . "insert.readme")
        ("Shell"       . "insert.shell")
        ("Html"        . "insert.html")
        ("WML"         . "insert.wml")
        ("PHP"         . "insert.php")
        ("Gnuplot"     . "insert.gnuplot")
        ("Perl"        . "insert.pl")
        ("Perl Module" . "insert.pm")
        ("Perl Test"   . "insert.t")
        ("Puppet"      . "insert.pp")
        ("Ruby"        . "insert.rb")
        ("R"           . "insert.R")
        ("OAR"         . "insert.oar")
        ))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/backup.el
;; === Auto-save and backup files ===
(setq auto-save-list-file-name nil)     ; no .saves files
(setq auto-save-default        t)       ; auto saving
(setq make-backup-files        t)       ; make  backup files
;; see http://www.emacswiki.org/emacs/BackupDirectory

(setq  backup-directory (concat emacs-root ".backup/"))
;; Set backup directory
;; store all backup and autosave files there
(setq backup-directory-alist
      `((".*" . ,backup-directory)))
(setq auto-save-file-name-transforms
      `((".*" , backup-directory t)))

;; ;; Set backup directory in /tmp
;; ;; store all backup and autosave files in the /tmp dir
;; (setq backup-directory-alist
;;       `((".*" . ,temporary-file-directory)))
;; (setq auto-save-file-name-transforms
;;       `((".*" ,temporary-file-directory t)))

(setq
 backup-by-copying t                    ; don't clobber symlinks
 ;; backup-directory-alist
 ;; '(("." . "~/.saves"))                  ; don't litter my fs tree
 delete-old-versions t                  ; delete excess backup versions
                                        ; silently
 kept-new-versions 6
 kept-old-versions 2
 version-control t)                     ; make numeric backup versions
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/completion.el
;; === Code completion ===
;; see http://www.emacswiki.org/emacs/TabCompletion


;;(require 'smart-tab)
(use-package smart-tab
  :init
  (progn
	(global-smart-tab-mode t)))


;; Disable indent "smart" alignement to insert real tabs
(defun indent-with-real-tab-hook ()
  (setq indent-line-function 'insert-tab)
  )
;;(add-hook 'text-mode-hook   'indent-with-real-tab-hook)
(add-hook 'conf-mode-hook   'indent-with-real-tab-hook)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/display.el
;;
;; setup basic look and feel for emacs (scrolling, fonts, color theme etc.)
;;


;; === defaults ===
(setq truncate-partial-width-windows nil)
(setq line-number-mode    t)
(setq column-number-mode  t)

;; === F... the beep ===
(setq visible-bell        t)

;; === Default size of the frame ===
(set-frame-width (selected-frame) 145)
(set-frame-height (selected-frame) 60)

;; === remove the few annoyance of default emacs ===
;; Use "y or n" answers instead of full words "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;; kill and move region directly
(delete-selection-mode t)
;; (pc-selection-mode)

;; === display current time in the status bar ===
;; (setq display-time-day-and-date t
;;       display-time-24hr-format t)
(setq display-time-string-forms
      '(24-hours ":" minutes " " seconds))
(display-time-mode 1)

;;
;; === Specify the frame title ===
;; see http://www.emacswiki.org/emacs/FrameTitle
;; recognize the same special characters as mode-line-format variable, mainly:
;;    %b -- print buffer name.      %f -- print visited file name.
;;    %F -- print frame name.
;;    %* -- print %, * or hyphen.   %+ -- print *, % or hyphen.
;;          %& is like %*, but ignore read-only-ness.
;;          % means buffer is read-only and * means it is modified.
;;          For a modified read-only buffer, %* gives % and %+ gives *.
;;    %m -- print the mode name.
;;    %z -- print mnemonics of buffer, terminal, and keyboard coding systems.
;;    %Z -- like %z, but including the end-of-line format.
;;    %[ -- print one [ for each recursive editing level.  %] similar.
;;    %% -- print %.   %- -- print infinitely many dashes.
;;  Decimal digits after the % specify field width to which to pad.
(setq frame-title-format '(buffer-file-name "emacs: %b (%f)" "emacs: %b"))

;; =================================================================
;; Font selection (to use a mono-spaced (non-proportional) font)
;; =================================================================
;; Snow Leopard users may try Menlo-12, other should consider Monaco-12.
(add-to-list 'default-frame-alist '(font . "Monaco-12"))

;; =================================================================
;; Powerline Status Bar
;; =================================================================
;; See https://github.com/milkypostman/powerline
;; inspired by [vim-powerline](https://github.com/Lokaltog/vim-powerline).
(use-package powerline)
(powerline-center-theme)
;; shape...
;; (setq powerline-arrow-shape 'arrow) ;; mirrored arrows,
;; (setq powerline-color1 "DarkGrey")
;; (setq powerline-color2 "honeydew1")
;; (custom-set-faces
;;  '(powerline-active1 '((t (:background "DarkGrey"  :inherit mode-line))))
;;  '(powerline-active2 '((t (:background "honeydew1" :inherit mode-line)))))

;; (custom-theme-set-faces
;;  'color-theme-vim-insert-mode
;;  `(powerline-active1 ((t (:background "DarkGrey"    :inherit mode-line))))
;;  `(powerline-active2 ((t (:background "honeydew1"   :inherit mode-line))))
;;  `(powerline-inactive1 ((t (:background "gray71"    :inherit mode-line-inactive))))
;;  `(powerline-inactive2 ((t (:background "honeydew3" :inherit mode-line-inactive)))))

;; (setq powerline-color1 "grey22")
;; (setq powerline-color2 "grey40")
;; (custom-set-faces
;;  '(mode-line ((t (:foreground "#030303" :background "#bdbdbd" :box nil))))
;;  '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#666666" :box nil)))))

;; (when (and (buffer-file-name (current-buffer)) vc-mode)
;;     (if (vc-workfile-unchanged-p (buffer-file-name (current-buffer)))
;;       (powerline-vc 'powerline-insert-face 'r)
;;       (powerline-vc 'powerline-normal-face 'r)))



;; =================================================================
;; Emacs Color Theme
;; see http://www.emacswiki.org/emacs/ColorTheme
;; see http://code.google.com/p/gnuemacscolorthemetest/ For direct
;; screenshots
;; =================================================================
;; WITH color theme
(use-package color-theme
  :init
  (progn
	(color-theme-initialize)
	(setq color-theme-is-global t)
	(color-theme-vim-colors)))



;; To better see the cursor
(setq default-frame-alist
      '((cursor-color . "green")
        (cursor-type . box)))
(set-default 'cursor-type 'box)

;; === See the end of the file ===
(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))

;; See also trailing whitespace
(setq-default show-trailing-whitespace t)

;; === Auto fit the size of the frame to the buffer content ===
;; see http://www.emacswiki.org/emacs/Shrink-Wrapping_Frames
;; run 'M-x fit-frame' for that
;;(require 'fit-frame)
;;(add-hook 'after-make-frame-functions 'fit-frame)


;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/easypg.el
;; -*- mode: lisp; -*-
;; =======================================
;; === Auto Encryption (with GPG etc.) ===
;; =======================================
;; See http://www.emacswiki.org/emacs/EasyPG
;;(if (equal emacs-major-version 23)
;;  (require 'epa-setup))

;;(require 'epa-file)
(use-package epa-file
  :init
  (progn
	(epa-file-enable)))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/filladapt.el
;; =============================================
;; Activate fill adapt
;; see http://www.emacswiki.org/emacs/FillAdapt
;; =============================================

;;(require 'filladapt)
(use-package filladapt
  :init
  (progn
    (setq-default filladapt-mode nil)
    (cond ((equal mode-name "Change Log")
           t)
          (t
           (turn-on-filladapt-mode)))))


;; turn on filladapt mode everywhere but in ChangeLog files

;; (add-hook 'c-mode-common-hook
;;    (lambda ()
;;      (when (featurep 'filladapt)
;;        (c-setup-filladapt))))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/global.el
;; Global configuration

;; Add menu bar
(menu-bar-mode   t)

(setq search-highlight         t)       ; highlight search object
(setq query-replace-highlight  t)       ; highlight query object
(setq byte-compile-verbose     t)
(setq initial-major-mode 'text-mode)    ; to avoid autoloads for lisp mode
(setq require-final-newline t)          ; ensure a file ends in a newline when it

;; Increase the lisp interpretor depth 
;;(setq max-lisp-eval-depth 10000)


;; Correct copy-paste to clipboard
(setq x-select-enable-clipboard t)
;; after mouse selection in X11, you can paste by `yank' in emacs
;;(Setq x-select-enable-primary t)
(setq mouse-drag-copy-region  t)

;; Technomancy better defaults -- see https://github.com/technomancy/better-defaults
;;(require 'better-defaults)
(use-package better-defaults)

;; Finding Files (and URLs) At Point (FFAP)
;; see http://www.gnu.org/software/emacs/manual/html_node/emacs/FFAP.html
;;(require 'ffap)
(use-package ffap)


;; Unique buffer names dependent on file name
;;(require 'uniquify)
(use-package uniquify)

;; style used for uniquifying buffer names with parts of directory name
(setq uniquify-buffer-name-style 'forward)

;;(require 'ansi-color)
(use-package ansi-color)

;; === Sane defaults configurations ===

;; Allow pasting selection outside of Emacs
(setq x-select-enable-clipboard t)

;; Auto refresh buffers
(global-auto-revert-mode 1)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; Show keystrokes in progress
(setq echo-keystrokes 0.1)

;; Move files to trash when deleting
(setq delete-by-moving-to-trash t)

;; Transparently open compressed files
(auto-compression-mode t)


;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top

;; Show active region
(transient-mark-mode 1)
(make-variable-buffer-local 'transient-mark-mode)
(put 'transient-mark-mode 'permanent-local t)
(setq-default transient-mark-mode t)

;; Remove text in active region if inserting text
(delete-selection-mode 1)

;; Don't highlight matches with jump-char - it's distracting
(setq jump-char-lazy-highlight-face nil)

;; === Auto-fill configuration ===
;; automatic wrapping of lines and insertion of newlines when the cursor
;; goes over the column limit.
(setq-default fill-column 80)
(setq auto-fill-mode t)                 ; activate by default

;; Save minibuffer history
(savehist-mode 1)
(setq history-length 1000)

;; Undo/redo window configuration with C-c <left>/<right>
(winner-mode 1)

;; Never insert tabs
(set-default 'indent-tabs-mode nil)

;; Show me empty lines after buffer end
(set-default 'indicate-empty-lines t)

;; Easily navigate sillycased words
(global-subword-mode 1)

;; Don't break lines for me, please
(setq-default truncate-lines t)

;; Keep cursor away from edges when scrolling up/down
;;(require 'smooth-scrolling)

;; Allow recursive minibuffers
(setq enable-recursive-minibuffers t)

;; Don't be so stingy on the memory, we have lots now. It's the distant future.
(setq gc-cons-threshold 20000000)

;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
(setq org-replace-disputed-keys t)

;; Fontify org-mode code blocks
(setq org-src-fontify-natively t)

;; Represent undo-history as an actual tree (visualize with C-x u)
;; (setq undo-tree-mode-lighter "")
;; (require 'undo-tree)
;; (global-undo-tree-mode)

;; Sentences do not need double spaces to end. Period.
(set-default 'sentence-end-double-space nil)

;; A saner ediff
(setq ediff-diff-options "-w")
(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; Nic says eval-expression-print-level needs to be set to nil (turned off) so
;; that you can always see what's happening.
(setq eval-expression-print-level nil)

;; When popping the mark, continue popping until the cursor actually moves
;; Also, if the last command was a copy - skip past all the expand-region cruft.
(defadvice pop-to-mark-command (around ensure-new-position activate)
  (let ((p (point)))
    (when (eq last-command 'save-region-or-current-line)
      ad-do-it
      ad-do-it
      ad-do-it)
    (dotimes (i 10)
      (when (= p (point)) ad-do-it))))

;; Turn on auto completion
;; See http://www.emacswiki.org/emacs/AutoComplete
;;(require 'auto-complete-config)
(use-package auto-complete-config
  :init
  (progn
	(ac-config-default)))


;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/hotfix-x-popup.el
;; -*- mode: lisp; -*-
;; Time-stamp: <Mer 2014-09-17 21:52 svarrette>
;;
;; hotfix-x-popup.el - Hotfix on emacs popup dialogs on Mac OS X that freeze
;; see http://superuser.com/questions/125569/how-to-fix-emacs-popup-dialogs-on-mac-os-x
;; ----------------------------------------------------------------------

(when is-mac
  (defadvice yes-or-no-p (around prevent-dialog activate)
    "Prevent yes-or-no-p from activating a dialog"
    (let ((use-dialog-box nil))
      ad-do-it))
  (defadvice y-or-n-p (around prevent-dialog-yorn activate)
    "Prevent y-or-n-p from activating a dialog"
    (let ((use-dialog-box nil))
      ad-do-it)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/indent.el
;; === Indenting configuration ===
;; see http://www.emacswiki.org/emacs/IndentationBasics
(setq-default tab-width 2)

(defvaralias 'c-basic-offset 	 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

;; === Show whitespaces/tabs etc. ===
(setq x-stretch-cursor t)

;; === Get ride of tabs most of the time ===
(setq-default indent-tabs-mode nil)     ; indentation can't insert tabs

(setq-default c-basic-offset 4
              tab-width 4
              indent-tabs-mode t)


;; (setq c-brace-offset -2)
;;(setq c-auto-newline t)
;; (add-hook 'c-mode-common-hook (lambda () (setq c-basic-offset 4)))
;; (add-hook 'c-mode-common-hook (lambda () (setq c-recognize-knr-p nil)))
;; (add-hook 'ada-mode-hook (lambda ()      (setq ada-indent 4)))
;; (add-hook 'perl-mode-hook (lambda ()     (setq perl-basic-offset 4)))
;; (add-hook 'cperl-mode-hook (lambda ()    (setq cperl-indent-level 4)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/ispell.el
;; -*- mode: lisp; -*-

;; LaTeX-sensitive spell checking
(setq ispell-enable-tex-parser t)

;; defautl dictionnary
(setq ispell-local-dictionary "en")

;; save the personal dictionary without confirmation
(setq ispell-silently-savep t)

;; enable the likeness criteria
;;(setq flyspell-sort-corrections nil)

;; dash character (`-') is considered as a word delimiter
;;(setq flyspell-consider-dash-as-word-delimiter-flag t)

;; Add flyspell to the following major modes
(dolist (hook '(text-mode-hook html-mode-hook messsage-mode-hook))
  (add-hook hook (lambda ()
                   (turn-on-auto-fill)
                   (flyspell-mode t))))

;; disable flyspell in change log and log-edit mode that derives from text-mode
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode nil))))

;; flyspell comments and strings in programming modes
;; (preventing it from finding mistakes in the code)
(dolist (hook '(autoconf-mode-hook autotest-mode-hook c++-mode-hook c-mode-hook cperl-mode-hook  emacs-lisp-mode-hook makefile-mode-hook nxml-mode-hook python-mode-hook
                                   sh-mode-hook))
  (add-hook hook 'flyspell-prog-mode))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/parenthesis.el
;; === Show matching parenthesis ===
(require 'paren)
(GNUEmacs
 (show-paren-mode t)
 (setq show-paren-ring-bell-on-mismatch t))
(XEmacs
 (paren-set-mode 'paren))

(setq show-paren-style 'expression)
(set-face-background 'show-paren-match-face "turquoise")
;; (set-face-attribute 'show-paren-match-face nil 
;;                     :weight 'bold :underline nil :overline nil :slant 'normal)
(set-face-foreground 'show-paren-mismatch-face "red") 
(set-face-attribute 'show-paren-mismatch-face nil 
                    :weight 'bold :underline t :overline nil :slant 'normal)


;; show matching parenthesis, even if found outside the present screen.
;; see http://www.emacswiki.org/emacs/MicParen
;; (require 'mic-paren)                    ; loading
;; (paren-activate)                        ; activating
(use-package mic-paren
  :init
  (progn
	(paren-activate)))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/recentf.el
;; === Recentf mode ===
;; see http://www.emacswiki.org/emacs/RecentFiles
;; A minor mode that builds a list of recently opened files
;;(require 'recentf)
(use-package recentf
  :init
  (progn
    ;;  file to save the recent list into
    (setq recentf-save-file "~/.emacs.d/.recentf")

    ;; maximum number of items in the recentf menu
    (setq recentf-max-menu-items 30)

    ;; save file names relative to my current home directory
    (setq recentf-filename-handlers '(abbreviate-file-name))

    (recentf-mode t)                        ; activate it
    ))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/saveplace.el
;; -*- mode: lisp; -*-
;; Saving Emacs Sessions (cursor position etc. in a previously visited file)
;; (require 'saveplace)
;; (setq-default save-place t)
(use-package saveplace
  :init
  (progn
	(setq-default save-place t)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/time-stamp.el
;; -*- mode:lisp; -*-
;; === Maintain last change time stamps (via Time-stamp: <Dim 2014-09-21 09:21 svarrette>) ===
;;(require 'time-stamp)
(use-package time-stamp
  :init
  (progn
	;; format of the string inserted by `M-x time-stamp'
	(setq time-stamp-format "%3a %:y-%02m-%02d %02H:%02M %u")
                                        ; `Weekday YYYY-MM-DD HH:MM USER'

	;; update time stamps every time you save a buffer
	(add-hook 'write-file-hooks 'time-stamp)))


;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/1_general_settings/user.el
;; User configuration / Identity
(setq user-full-name    "Sebastien Varrette")
(setq user-mail-address "<Sebastien.Varrette@uni.lu>")
(setq user-www          "http://varrette.gforge.uni.lu")
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/0_defuns/buffer-indent.el
;; === Indentation and buffer cleanup ===
;; This re-indents, untabifies, and cleans up whitespace. It is stolen directly
;; from the emacs-starter-kit. 

(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

(defun cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/0_defuns/complete-or-indent.el
;; complement or indent on TAB=C-i
(defun th-complete-or-indent (arg)
  "If preceding character is a word character and the following character is a whitespace or non-word character, then
  `dabbrev-expand', else indent according to mode."
  (interactive "*P")
  (cond ((and
          (= (char-syntax (preceding-char)) ?w)
          (looking-at (rx (or word-end (any ".,;:#=?()[]{}")))))
         (require 'sort)
         (let ((case-fold-search t))
           (dabbrev-expand arg)))
        (t
         (indent-according-to-mode))))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/0_defuns/ecb-toggle.el
;; to activate or not ECB 
(defun ecb-toggle ()
  "Activate (or desactivate) Emacs Code Browser (ECB)"
  (interactive)
  (if ecb-minor-mode
      (ecb-deactivate)
    (ecb-activate)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/0_defuns/framegeometry.el
;; framegeometry.el
;; use to restore the frame size of last session
;; Courtesy from http://ck.kennt-wayne.de/2011/jul/emacs-restore-last-frame-size-on-startup

(defun save-framegeometry ()
  "Gets the current frame's geometry and saves to ~/.emacs.d/.framegeometry."
  (let (
        (framegeometry-left (frame-parameter (selected-frame) 'left))
        (framegeometry-top (frame-parameter (selected-frame) 'top))
        (framegeometry-width (frame-parameter (selected-frame) 'width))
        (framegeometry-height (frame-parameter (selected-frame) 'height))
        (framegeometry-file (expand-file-name "~/.emacs.d/.framegeometry"))
        )

    (with-temp-buffer
      (insert
       ";;; This is the previous emacs frame's geometry.\n"
       ";;; Last generated " (current-time-string) ".\n"
       "(setq initial-frame-alist\n"
       "      '(\n"
       (format "        (top . %d)\n" (max framegeometry-top 0))
       (format "        (left . %d)\n" (max framegeometry-left 0))
       (format "        (width . %d)\n" (max framegeometry-width 0))
       (format "        (height . %d)))\n" (max framegeometry-height 0)))
      (when (file-writable-p framegeometry-file)
        (write-file framegeometry-file))))
  )

(defun load-framegeometry ()
  "Loads ~/.emacs.d/.framegeometry which should load the previous frame's geometry."
  (let ((framegeometry-file (expand-file-name "~/.emacs.d/.framegeometry")))
    (when (file-readable-p framegeometry-file)
      (load-file framegeometry-file)))
  )

;; Special work to do ONLY when there is a window system being used
(if window-system
    (progn
      (add-hook 'after-init-hook 'load-framegeometry)
      (add-hook 'kill-emacs-hook 'save-framegeometry))
  )

;; eof
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/0_defuns/ido-imenu.el
;; === Buffer-related ===

(defun ido-imenu ()
  "Update the imenu index and then use ido to select a symbol to navigate to.
Symbols matching the text at point are put first in the completion list."
  (interactive)
  (imenu--make-index-alist)
  (let ((name-and-pos '())
        (symbol-names '()))
    (cl-flet ((addsymbols (symbol-list)
                       (when (listp symbol-list)
                         (dolist (symbol symbol-list)
                           (let ((name nil) (position nil))
                             (cond
                              ((and (listp symbol) (imenu--subalist-p symbol))
                               (addsymbols symbol))

                              ((listp symbol)
                               (setq name (car symbol))
                               (setq position (cdr symbol)))

                              ((stringp symbol)
                               (setq name symbol)
                               (setq position (get-text-property 1 'org-imenu-marker symbol))))

                             (unless (or (null position) (null name))
                               (add-to-list 'symbol-names name)
                               (add-to-list 'name-and-pos (cons name position))))))))
      (addsymbols imenu--index-alist))
    ;; If there are matching symbols at point, put them at the beginning of `symbol-names'.
    (let ((symbol-at-point (thing-at-point 'symbol)))
      (when symbol-at-point
        (let* ((regexp (concat (regexp-quote symbol-at-point) "$"))
               (matching-symbols (delq nil (mapcar (lambda (symbol)
                                                     (if (string-match regexp symbol) symbol))
                                                   symbol-names))))
          (when matching-symbols
            (sort matching-symbols (lambda (a b) (> (length a) (length b))))
            (mapc (lambda (symbol) (setq symbol-names (cons symbol (delete symbol symbol-names))))
                  matching-symbols)))))
    (let* ((selected-symbol (ido-completing-read "Symbol? " symbol-names))
           (position (cdr (assoc selected-symbol name-and-pos))))
      (goto-char position))))

(defun recentf-ido-find-file ()
  "Find a recent file using ido."
  (interactive)
  (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
    (when file
      (find-file file))))

(defun sudo-edit (&optional arg)
  "Edit a file as root using sudo"
  (interactive "p")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/0_defuns/indent.el
;; === Indentation of the full buffer ===
;; Courtesy from http://emacsblog.org/2007/01/17/indent-whole-buffer/
(defun indent-buffer ()
  "indent whole buffer"
  (interactive)
  (save-excursion
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max))))

;; === Yank (copy) and indent the copied region
;; see http://www.emacswiki.org/emacs/AutoIndentation
(defun yank-and-indent ()
  "Yank and then indent the newly formed region according to mode."
  (interactive)
  (yank)
  (call-interactively 'indent-region))

;; === unindent ===
(defun unindent-region ()
  (interactive)
  (save-excursion
	(if (< (point) (mark)) (exchange-point-and-mark))
	(let ((save-mark (mark)))
	  (if (= (point) (line-beginning-position)) (previous-line 1))
	  (goto-char (line-beginning-position))
	  (while (>= (point) save-mark)
		(goto-char (line-beginning-position))
		(if (= (string-to-char "\t") (char-after (point))) (delete-char 1))
		(previous-line 1)))))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/0_defuns/load-file-if-exists.el
(defun load-file-if-exists (file)
  "Load the lisp file FILE only if the file exists"
  (if (file-exists-p file) (load-file file)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/0_defuns/neotree.el
;; ----------------------------------------------------------------------
;; File: neotree.el - 
;; Time-stamp: <Mer 2014-09-17 21:59 svarrette>
;;
;; Copyright (c) 2014 Sebastien Varrette <Sebastien.Varrette@uni.lu>
;;
;; ----------------------------------------------------------------------

;; see http://www.emacswiki.org/emacs/NeoTree


(defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (ffip-project-root))
          (file-name   (buffer-file-name)))
      (if project-dir
          (progn
            (neotree-dir project-dir)
            (neotree-find file-name))
        (message "Could not find git project root."))))



;; ----------------------------------------------------------------------
;; eof
;;
;; Local Variables:
;; mode: lisp
;; End:
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/0_defuns/ruby.el
;; -*- mode: lisp; -*-
;; https://github.com/magnars/.emacs.d/blob/master/setup-ruby-mode.el

(defun ruby--jump-to-test ()
  (find-file
   (replace-regexp-in-string
    "/lib/" "/test/"
    (replace-regexp-in-string
     "/\\([^/]+\\).rb$" "/test_\\1.rb"
     (buffer-file-name)))))

(defun ruby--jump-to-lib ()
  (find-file
   (replace-regexp-in-string
    "/test/" "/lib/"
    (replace-regexp-in-string
     "/test_\\([^/]+\\).rb$" "/\\1.rb"
     (buffer-file-name)))))

(defun ruby-jump-to-other ()
  (interactive)
  (if (string-match-p "/test/" (buffer-file-name))
      (ruby--jump-to-lib)
    (ruby--jump-to-test)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/0_defuns/try-require.el
;; === attempt to load a feature/library, failing silently ===
(defun try-require (feature)
  "Attempt to load a library or module. Return true if the
library given as argument is successfully loaded. If not, instead
of an error, just add the package to a list of missing packages."
  (condition-case err
      ;; protected form
      (progn
        (message "Checking for library `%s'..." feature)
        (if (stringp feature)
            (load-library feature)
          (require feature))
        (message "Checking for library `%s'... Found" feature))
    ;; error handler
    (file-error  ; condition
     (progn
       (message "Checking for library `%s'... Missing" feature)
       (add-to-list 'missing-packages-list feature))
     nil)))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/0_defuns/word-count.el
;; === Word count ===
                                        ;(defun word-count nil 
                                        ;  "Count words in buffer" 
                                        ;  (interactive)
                                        ;  (shell-command-on-region (point-min) (point-max) "wc -w"))

;; Courtesy of Evan Sultanik (http://www.sultanik.com/Word_count_in_Emacs)
;; quote: "I wrote a relatively simple (and equally lazy) Emacs Lisp function to
;;         calculate word length. It even strips LaTeX files of their commands!"
(defun word-count (&optional filename)
  "Returns the word count of the current buffer.  If `filename' is not nil, returns the word count of that file."
  (interactive)
  (save-some-buffers) ;; Make sure the current buffer is saved
  (let ((tempfile nil))
    (if (null filename)
        (progn
          (let ((buffer-file (buffer-file-name))
                (lcase-file (downcase (buffer-file-name))))
            (if (and (>= (length lcase-file) 4) (string= (substring lcase-file -4 nil) ".tex"))
                ;; This is a LaTeX document, so DeTeX it!
                (progn
                  (setq filename (make-temp-file "wordcount"))
                  (shell-command-to-string (concat "detex < " buffer-file " > " filename))
                  (setq tempfile t))
              (setq filename buffer-file)))))
    (let ((result (car (split-string (shell-command-to-string (concat "wc -w " filename)) " "))))
      (if tempfile
          (delete-file filename))
      (message (concat "Word Count: " result))
      )))

;; === find a word definition === 
(defun word-definition-lookup ()
  "Look up the word under cursor in a browser."
  (interactive)
  (browse-url
   (concat "http://www.answers.com/main/ntquery?s="
           (thing-at-point 'word))))

;; ############################################################################


;; ~/.emacs.d/config.el ends here
