;; ~/.emacs.d/config.el -- Emacs configurations

;; Generated by Emacs Modular Configuration version 0.1
;; DO NOT EDIT THIS FILE.
;; Edit the files under '~/.emacs.d/config' directory tree, 
;; then run within emacs 'M-x emc-merge-config-files'

;; ############################################################################
;; Config file: ~/.emacs.d/config/modes/ace-jump.el
;; -*- mode: lisp; -*-
;; Time-stamp: <Mer 2014-09-24 23:42 svarrette>
;; ----------------------------------------------------------------------
;; Ace-jump-mode --  a quick cursor location minor mode for emacs
;; see http://www.emacswiki.org/AceJump
;; see also https://github.com/winterTTr/ace-jump-mode
;; ----------------------------------------------------------------------

(use-package ace-jump-mode
  :commands (ace-jump-mode)
  :bind ("C-c C-j" . ace-jump-mode))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/modes/auctex.el
;; -*- mode: lisp; -*-
;; === LaTeX ===

;; Does not work ;(
(defun guess-TeX-master (filename)
  "Guess the master file for FILENAME from currently open .tex files."
  (let ((candidate nil)
        (filename (file-name-nondirectory filename)))
    (save-excursion
      (dolist (buffer (buffer-list))
        (with-current-buffer buffer
          (let ((name (buffer-name))
                (file buffer-file-name))
            (if (and file (string-match "\\.tex$" file))
                (progn
                  (goto-char (point-min))
				  (if (re-search-forward (concat "\\\\begin{document}") nil t)
                      (setq candidate file))
                   (if (re-search-forward (concat "\\\\input{" filename "}") nil t)
                      (setq candidate file))
                  (if (re-search-forward (concat "\\\\include{" (file-name-sans-extension filename) "}") nil t)
                      (setq candidate file))))))))
    (if candidate
        (message "TeX master document: %s" (file-name-nondirectory candidate)))
    candidate))

;; ------------------
(use-package tex-site
  :config
  (progn
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil) ; Query for master file.
    ;;(setq TeX-master (guess-TeX-master (buffer-file-name)))
    (setq TeX-PDF-mode t)
	;;
    ;; use Skim as default pdf viewer
    ;; Skim's displayline is used for forward search (from .tex to .pdf)
    ;; option -b highlights the current line; option -g opens Skim in the background
    (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
    ;;(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "make")))
    (setq TeX-view-program-list
          '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))))

(use-package latex-mode
  :commands LaTeX-math-mode
  :mode ("\\.tex\\'" . latex-mode)
  :config
  (progn
	(use-package auto-complete-auctex)
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (visual-line-mode t)
                (LaTeX-math-mode)
				(setq TeX-master nil)
				(setq LaTeX-command "pdflatex -synctex=1")
				;;(setq TeX-master (guess-TeX-master (buffer-file-name)))
                ;; RefTex: manage cross references, bibliographies, indices, document navigation
                ;; and a few other things
                ;; see http://www.emacswiki.org/emacs/RefTeX
                (turn-on-reftex)))
	;; make latexmk available via C-c C-c
	;; Note: SyncTeX is setup via ~/.latexmkrc as follows:
	;;
	;;  $pdflatex = 'pdflatex -interaction=nonstopmode -synctex=1 %O %S';
	;;  $pdf_previewer = 'open -a skim';
	;;  $clean_ext = 'bbl rel %R-blx.bib %R.synctex.gz';
    ;;
	;; (add-hook 'LaTeX-mode-hook (lambda ()
    ;;                              (push
    ;;                               '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
    ;;                                 :help "Run latexmk on file")
    ;;                               TeX-command-list)))
	(setq reftex-plug-into-AUCTeX t)
    (setq LaTeX-item-indent 0)
    (setq TeX-brace-indent-level 2)))

;; (use-package latex-extra
;;   :init
;;   (progn
;; 	(add-hook 'LaTeX-mode-hook #'latex-extra-mode)
;; 	;; turn off auto-fill-mode, one can turn on it manually
;; 	(add-hook 'latex-extra-mode-hook (lambda () (auto-fill-mode -1)) t)))







;; ;; make a LaTeX reference (to a label) by pressing `C-c )'
;; ;; insert a label by pressing `C-c (' (or `C-('
;; ;; insert a citation by pressing `C-c [' (or `C-['

;; ;; hit `C-c ='; the buffer will split into 2 and in the top half you
;; ;; will see a TOC, hitting `l' there will show all the labels and cites.

;; (add-hook 'LaTeX-mode-hook 'turn-on-reftex) ; with AUCTeX LaTeX mode
;; (setq reftex-plug-into-AUCTeX t)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/modes/compile.el
;; -*- mode: lisp; -*-
;; Time-stamp: <Lun 2014-11-10 10:46 svarrette>
;; ----------------------------------------------------------------------
;; Compilation mode

(use-package smart-compile)

;; -------------
;; Management of the modeline background color to represent the compilation
;; process outputs  :
;;
;;   * blue:   compilation in progress
;;   * green:  compilation finished successfully
;;   * orange: compilation finished with warnnings
;;   * red:    compilation finished with errors
;;
(defvar modeline-timer)
(setq modeline-timer nil)

(defvar modeline-timeout)
(setq modeline-timeout "2 sec")

(defvar open-compilation-buffer-flag)

(defun modeline-set-color (color)
  "Colors the modeline"
  (interactive)
  (if (and (>= emacs-major-version 24) (>= emacs-minor-version 3))
      (set-face-background 'mode-line color)
    (set-face-background 'modeline color)
    )
  )

(defun modeline-cancel-timer ()
  (let ((m modeline-timer))
    (when m
      (cancel-timer m)
      (setq modeline-timer nil))))

(defun modeline-delayed-clean ()
  (modeline-cancel-timer)
  (setq modeline-timer
        (run-at-time modeline-timeout nil 'modeline-set-color nil)))

(defun compilation-exit-hook (status code msg)
  ;; If M-x compile exists with a 0
                                        ;  (defvar current-frame)
  (if (and (eq status 'exit) (zerop code))
      (progn
        (if (string-match "warning:" (buffer-string))
            (modeline-set-color "orange")
          (modeline-set-color "YellowGreen")
          )
        (other-buffer (get-buffer "*compilation*"))
        (modeline-delayed-clean)
                                        ;      (delete-windows-on (get-buffer "*compilation*"))
        )
    (progn
      (modeline-set-color "OrangeRed")
      (if open-compilation-buffer-flag
          (open-compilation-buffer)
        (modeline-delayed-clean)
        )))

                                        ;  (setq current-frame (car (car (cdr (current-frame-configuration)))))
                                        ;  (select-frame-set-input-focus current-frame)
  ;; Always return the anticipated result of compilation-exit-message-function
  (cons msg code))

(defadvice compile (around compile/save-window-excursion first () activate)
  (save-window-excursion ad-do-it))

(defadvice recompile (around compile/save-window-excursion first () activate)
  (save-window-excursion ad-do-it))

; FIXME: nobody calls this
(defun recompile-if-not-in-progress ()
  (let ((buffer (compilation-find-buffer)))
    (unless (get-buffer-process buffer)
      (recompile)))
  )

(defun interrupt-compilation ()
  (setq compilation-exit-message-function 'nil)
  (ignore-errors
    (progn (delete-process "*compilation*")
  	   (modeline-set-color "DeepSkyBlue")
  	   (message "previous compilation aborted!")
  	   (sit-for 1.5)
  	   ))

; (ignore-errors
;   (progn (process-kill-without-query
; 	    (get-buffer-process (get-buffer "*compilation*")))
; 	   (modeline-set-color "DeepSkyBlue")))

;  (condition-case nil
;      (process-kill-without-query
;       (get-buffer-process (get-buffer "*compilation*")))
;    (error (modeline-set-color "DeepSkyBlue")))
  )


(defun interrupt-and-recompile ()
  "Interrupt old compilation, if any, and recompile."
  (interactive)
  (interrupt-compilation)
  (recompile)
)

(setq compilation-last-buffer nil)
(defun compile-again ()
   "Run the same compile as the last time.
    If there was no last time, or there is a prefix argument, this acts like
      M-x compile."
   (interactive)

   (setq compilation-process-setup-function
	 (lambda() (progn (modeline-cancel-timer)
			  (setq compilation-exit-message-function 'compilation-exit-hook)
			  (modeline-set-color "LightBlue"))))

   (if compilation-last-buffer
       (progn
;	 (condition-case nil
;	     (set-buffer compilation-last-buffer)
;	   (error 'ask-new-compile-command))
	 (modeline-cancel-timer)
	 (interrupt-and-recompile)
	 )
     (call-interactively 'smart-compile)
     )
   )

(defun save-and-compile-again ()
  (interactive)
  (save-some-buffers 1)
  (setq open-compilation-buffer-flag t)
  (compile-again)
  )

(defun ask-new-compile-command ()
  (interactive)
  (setq compilation-last-buffer nil)
  (save-and-compile-again)
  )

(defun open-compilation-buffer()
  (interactive)
  (display-buffer "*compilation*")
  (modeline-delayed-clean)
  )


(global-set-key (kbd "C-x C-e")  'save-and-compile-again)
(global-set-key (kbd "<f6>")     'save-and-compile-again)


; Kill compilation buffer upon successful compilation
;; ;; Courtesy from http://stackoverflow.com/questions/11043004/emacs-compile-buffer-auto-close
;; (defun bury-compile-buffer-if-successful (buffer string)
;;   "Bury a compilation buffer if succeeded without warnings "
;;   (if (and
;;        (string-match "compilation" (buffer-name buffer))
;;        (string-match "finished" string)
;;        (not
;;         (with-current-buffer buffer
;;           (search-forward "warning" nil t))))
;;       (run-with-timer 1 nil
;;                       (lambda (buf)
;;                         (bury-buffer bufq)
;;                         (switch-to-prev-buffer (get-buffer-window buf) 'kill))
;;                       buffer)))

;; (add-hook 'compilation-finish-functions 'bury-compile-buffer-if-successful)


;; Below version does not work with ECB and lead to the error:
;; ECB 2.40 - Error: Can't use winner-mode functions in the ecb-frame
;;
;; (defun compile-autoclose (buffer string)
;;   (cond
;;    ((string-match "finished" string)
;;     (bury-buffer "*compilation*")
;;     (winner-undo)
;;     ;;(message "Build successful.")
;;     (message "%s" (propertize "Build successful." 'face '(:foreground "YellowGreen"))))
;;    (t
;;     (message "%s: %s" (propertize "Compilation exited abnormally" 'face '(:foreground "red")) string))))

;; (setq compilation-finish-functions 'compile-autoclose)

;; Colored bar attempt
;; see code from https://bitbucket.org/arco_group/emacs-pills
;; in `config/compile.cfg.el`
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/modes/electric.el
;; -*- mode: lisp; -*-
;; Time-stamp: <Sam 2014-10-04 11:26 svarrette>
;; ----------------------------------------------------------------------
;; Electric mode setting

;; (electric-indent-mode 1) ;; defined in general_settings/indent.el
(electric-pair-mode 1)
(electric-layout-mode 1)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/modes/helm.el
;; Configure helm mode
;; see http://emacs-helm.github.io/helm/
;;(helm-mode 1)


(defun helm-do-grep-recursive (&optional non-recursive)
  "Like `helm-do-grep', but greps recursively by default."
  (interactive "P")
  (let* ((current-prefix-arg (not non-recursive))
         (helm-current-prefix-arg non-recursive))
    (call-interactively 'helm-do-grep)))

(use-package helm
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100))
  :bind (("C-c h"   . helm-mini)
         ("M-x"     . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x C-r" . helm-recentf)
         ("C-x C-g" . helm-do-grep)
		 ;; see projectile.el for C-x C-p
         ))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/modes/markdown.el
;; -*- mode: lisp; -*-
;; === Markdown ===
;; see http://jblevins.org/projects/markdown-mode/
;;(require 'markdown-mode)

(defun markdown-preview-file ()
      "run Marked on the current file and revert the buffer"
      (interactive)
      (shell-command
       (format "open -a /Applications/Marked\ 2.app %s"
               (shell-quote-argument (buffer-file-name)))))

(use-package markdown-mode
  :mode (("\\.txt\\'"   . markdown-mode)
		 ("\\.md\\'"    . markdown-mode)
		 ("\\.mdown\\'" . markdown-mode))
  :init
  (progn
	(local-unset-key "<tab>") ;; disable markdown-cycle
	(setq markdown-command "pandoc --smart -f markdown -t html")
	(setq markdown-css-path (expand-file-name "markdown.css" emacs-root)))
  :bind ("C-c C-v" . markdown-preview-file)
  :config
  (progn
	(use-package gfm-mode
	  :mode ("README\\.md\\'" . gfm-mode))
	(add-hook 'markdown-mode-hook
			  (lambda ()
				(visual-line-mode t)
				(whitespace-mode  -1)
				(flyspell-mode    t)))))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/modes/programming/global.el
;; -*- mode: lisp; -*-
;; ----------------------------------------------------------------------
;; File: global.el -  Global setting for any programming language          
;; Time-stamp: <Lun 2014-11-10 12:30 svarrette>
;;
;; Copyright (c) 2014 Sebastien Varrette <Sebastien.Varrette@uni.lu>
;; .             
;; ----------------------------------------------------------------------

(add-hook 'prog-mode-hook (lambda ()
							(setq show-trailing-whitespace t)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/modes/programming/ruby.el
;; -*- mode: lisp; -*-


;; https://github.com/magnars/.emacs.d/blob/master/setup-ruby-mode.el

(defun ruby--jump-to-test ()
  (find-file
   (replace-regexp-in-string
    "/lib/" "/test/"
    (replace-regexp-in-string
     "/\\([^/]+\\).rb$" "/test_\\1.rb"
     (buffer-file-name)))))

(defun ruby--jump-to-lib ()
  (find-file
   (replace-regexp-in-string
    "/test/" "/lib/"
    (replace-regexp-in-string
     "/test_\\([^/]+\\).rb$" "/\\1.rb"
     (buffer-file-name)))))

(defun ruby-jump-to-other ()
  (interactive)
  (if (string-match-p "/test/" (buffer-file-name))
      (ruby--jump-to-lib)
    (ruby--jump-to-test)))


(setq auto-mode-alist
      (append
       '(("\\.rake$"        . ruby-mode)
         ("\\.gemspec$"     . ruby-mode)
         ("\\.rb$"          . ruby-mode)
         ("Rakefile$"       . ruby-mode)
         ("Gemfile$"        . ruby-mode)
         ("Capfile$"        . ruby-mode)
         ("Vagrantfile"     . ruby-mode))
       auto-mode-alist))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/aquamacs.el
;; -*- mode: lisp; -*-
;; =================================================================
;; Aquamacs specific 
;; =================================================================
;; see http://www.emacswiki.org/emacs/AquamacsEmacsCompatibilitySettings
(Aquamacs
 (aquamacs-autoface-mode -1)  ; no mode-specific faces, everything in Monaco
 ;; do not load persistent scratch buffer
 (setq aquamacs-scratch-file nil)
 ;; do not make initial frame visible
 (setq show-scratch-buffer-on-startup nil)
)

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/auto-insert.el
;; -*- mode: lisp; -*-
;; Time-stamp: <Dim 2014-11-16 10:30 svarrette>
;; ========================================================
;; Auto-insert: automatic insertion of text into new files
;; ========================================================

;;(require 'auto-insert-tkld)    ; see ~/.emacs.d/site-lisp/auto-insert-tkld.el
;; (autoload 'auto-insert-tkld
;;   "auto-insert-tkld" "Manage auto insertion of new file" t)
(use-package auto-insert-tkld
  :init
  (progn
	(setq auto-insert-path (cons (concat emacs-root "auto-insert") auto-insert-path))
	(setq auto-insert-automatically t)
	)
  )
;; doc:  ~/.emacs.d/site-lisp/auto-insert-tkld.pdf

;; trick to abstract the personal web page
;;(setq auto-insert-organisation  user-www)

;; associate file extention to a template name
(setq auto-insert-alist
      '(
        ("\\.tex$"         . "LaTeX")            ; TeX or LaTeX
        ("\\.bib$"         . "BibTeX")           ; BibTeX
        ("\\.sty$"         . "LaTeX Style")      ; LaTeX Style
        ("\\.el$"          . "Emacs Lisp")       ; Emacs Lisp
        ("\\.java$"        . "Java")             ; Java
        ("\\App.java$"     . "JavaSwing")        ; Java Swing app
        ("[Tt]ools.h"      . "Tools C++")        ; Useful functions in C/C++
        ("\\Logs.cpp"      . "Logs C++")         ; Macros for logs/debugging
        ("\\Logs.h[+p]*"   . "Logs C++ Include") ; " header file
        ("\\.c$"           . "C")                ; C
        ("\\.h$"           . "C Include")        ; C header file
        ("\\.cxx$"         . "C++")              ; C++
        ("\\.c\\+\\+$"     . "C++")              ;
        ("\\.cpp$"         . "C++")              ;
        ("\\.cc$"          . "C++")              ;
        ("\\.C$"           . "C++")              ;
        ("[Mm]akefile$"    . "Makefile")         ; Makefile
        ("[Mm]akefile.am$" . "Makefile.am")      ; Makefile.am (Automake)
        ("\\.md$"          . "Text")             ; Text
        ("\\.markdown$"    . "Text")             ; Text
        ("\\.mdown$"       . "Text")             ; Text
        ("\\.txt$"         . "Text")             ; Text
        ("\\.gpg$"         . "GPG")              ; GPG 
        ("[Rr]eadme$"      . "Readme")           ; Readme
        ("README$"         . "Readme")           ;
        ("\\.sh$"          . "Shell")            ; Shell
        ("\\.csh$"         . "Shell")            ;
        ("\\.tcsh$"        . "Shell")            ;
        ("\\.html"         . "Html")             ; HTML
        ("\\.wml"          . "WML")              ; WML (Website Meta Language)
        ("\\.php"          . "PHP")              ; PHP
        ("\\.gnuplot"      . "Gnuplot")          ; Gnuplot
        ("\\.pl$"          . "Perl")             ; Perl
        ("\\.pm$"          . "Perl Module")      ; PerlModule
        ("\\.t$"           . "Perl Test")        ; Perl Test script
        ("\\.pp$"          . "Puppet")           ; Puppet manifest
        ("\\.rb$"          . "Ruby")             ; Ruby
        ("\\.R$"           . "R")                ; R
        ("\\.admission_rule[s]?$" . "OAR")              ; OAR admission rule
        (""                . "Shell") ; Shell (by default: assume a shell template)
        ))
;; now associate a template name to a template file
(setq auto-insert-type-alist
      '(
        ("LaTeX"       . "insert.tex")
        ("BibTeX"      . "insert.bib")
        ("LaTeX Style" . "insert.sty")
        ("Emacs Lisp"  . "insert.el")
        ("Java"        . "insert.java")
        ("JavaSwing"   . "insertApp.java")
        ("C"           . "insert.c")
        ("C Include"   . "insert.h")
        ("C++"         . "insert.cpp")
        ("Tools C++"   . "insert.tools_cpp.h")
        ("Logs C++"    . "insert.logs.cpp")
        ("Logs C++ Include" . "insert.logs.h")
        ("Makefile"    . "insert.makefile")
        ("Makefile.am" . "insert.makefile.am")
        ("Text"        . "insert.md")
        ("GPG"         . "insert.gpg")
        ("Readme"      . "insert.readme")
        ("Shell"       . "insert.shell")
        ("Html"        . "insert.html")
        ("WML"         . "insert.wml")
        ("PHP"         . "insert.php")
        ("Gnuplot"     . "insert.gnuplot")
        ("Perl"        . "insert.pl")
        ("Perl Module" . "insert.pm")
        ("Perl Test"   . "insert.t")
        ("Puppet"      . "insert.pp")
        ("Ruby"        . "insert.rb")
        ("R"           . "insert.R")
        ("OAR"         . "insert.oar")
        ))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/autocomplete.el
;; -*- mode: lisp; -*-
;; ----------------------------------------------------------------------
;; File: autocomplete.el -  See http://www.emacswiki.org/emacs/AutoComplete
;; Time-stamp: <Lun 2014-11-17 15:00 svarrette>
;;
;; Copyright (c) 2014 Sebastien Varrette <Sebastien.Varrette@uni.lu>
;; .
;; ----------------------------------------------------------------------

(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))

(use-package pabbrev
  :commands pabbrev-mode
  :diminish pabbrev-mode)



;; (use-package company
;;   :config
;;   (global-company-mode))

(use-package auto-complete-config
  :diminish auto-complete-mode
  :init
  (progn
    (setq ac-comphist-file (get-conf-path ".ac-comphist.dat"))
    (add-to-list 'ac-dictionary-directories "~/.emacs.d/.ac-dict")
    ;; (define-key ac-mode-map (kbd "M-/") 'ac-fuzzy-complete)
    ;; (dolist (ac-mode '(text-mode org-mode latex-mode))
    ;;   (add-to-list 'ac-modes ac-mode))
    ;; (dolist (ac-mode-hook '(text-mode-hook org-mode-hook prog-mode-hook))
    ;;   (add-hook ac-mode-hook
    ;;             (lambda ()
    ;;               (setq ac-fuzzy-enable t)
    ;;               (add-to-list 'ac-sources 'ac-source-files-in-current-dir)
    ;;               (add-to-list 'ac-sources 'ac-source-filename))))

    (ac-config-default)
                                        ; resetting ac-sources
    (setq-default ac-sources '(
                               ac-source-yasnippet
                               ac-source-abbrev
                               ac-source-dictionary
                               ac-source-words-in-same-mode-buffers
                               ))



    )
  :config
  (progn
    ;; set the trigger key so that it can work together with yasnippet on tab key,
    ;; if the word exists in yasnippet, pressing tab will cause yasnippet to
    ;; activate, otherwise, auto-complete will
    (ac-set-trigger-key "TAB")
    (ac-set-trigger-key "<tab>")

    ;;(bind-keys :map ac-mode-map
    ;;         ("<tab>" . ac-fuzzy-complete)
    ;;         ("TAB"   . ac-fuzzy-complete)
    ;;         )
    ;;(ac-set-trigger-key "<backtab>")
    ))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/backup.el
;; -*- mode: lisp -*-
;; Time-stamp: <Ven 2014-09-26 12:19 svarrette>
;; ===============================================
;;      Auto-save and backup files Management 
;; ===============================================

;; see http://www.emacswiki.org/emacs/BackupDirectory

(setq  backup-directory (get-conf-path ".backup/"))
(setq  auto-save-list-file-prefix (get-conf-path ".auto-save-list/.saves-"))

;; Set backup directory
;; store all backup and autosave files there
(setq backup-directory-alist
      `((".*" . ,backup-directory)))
(setq auto-save-file-name-transforms
      `((".*" , backup-directory t)))

(setq auto-save-list-file-name nil)     ; no .saves files
(setq auto-save-default        t)       ; auto saving
(setq make-backup-files        t)       ; make  backup files


;; ;; Set backup directory in /tmp
;; ;; store all backup and autosave files in the /tmp dir
;; (setq backup-directory-alist
;;       `((".*" . ,temporary-file-directory)))
;; (setq auto-save-file-name-transforms
;;       `((".*" ,temporary-file-directory t)))

(setq
 backup-by-copying t                    ; don't clobber symlinks
 ;; backup-directory-alist
 ;; '(("." . backup-directory ))           ; don't litter my fs tree
 delete-old-versions t                  ; delete excess backup versions silently
 kept-new-versions 6
 kept-old-versions 2
 version-control t)                     ; make numeric backup versions

;; ==== Save minibuffer history ===
(setq savehist-file (get-conf-path ".history"))
(savehist-mode 1)
(setq history-length 1000)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/display.el
;; -*- mode:lisp -*-
;; Time-stamp: <Lun 2014-11-10 12:25 svarrette>
;; ========================================================================
;; Setup basic look and feel for emacs (scrolling, fonts, color theme etc.)
;; ========================================================================
;;
(require 'cl-lib)


;; === defaults ===
(setq truncate-partial-width-windows nil)
(setq line-number-mode    t)
(setq column-number-mode  t)

;; === F... the beep ===
(setq visible-bell        t)

;; === Default size of the frame ===
(set-frame-width (selected-frame) 145)
(set-frame-height (selected-frame) 60)

;; === remove the few annoyance of default emacs ===
;; Use "y or n" answers instead of full words "yes or no"
(fset 'yes-or-no-p 'y-or-n-p)

;; kill and move region directly
(delete-selection-mode t)
;; (pc-selection-mode)

;; === display current time in the status bar ===
;; (setq display-time-day-and-date t
;;       display-time-24hr-format t)
(setq display-time-string-forms
      '(24-hours ":" minutes " " seconds))
(display-time-mode 1)

;;
;; === Specify the frame title ===
;; see http://www.emacswiki.org/emacs/FrameTitle
;; recognize the same special characters as mode-line-format variable, mainly:
;;    %b -- print buffer name.      %f -- print visited file name.
;;    %F -- print frame name.
;;    %* -- print %, * or hyphen.   %+ -- print *, % or hyphen.
;;          %& is like %*, but ignore read-only-ness.
;;          % means buffer is read-only and * means it is modified.
;;          For a modified read-only buffer, %* gives % and %+ gives *.
;;    %m -- print the mode name.
;;    %z -- print mnemonics of buffer, terminal, and keyboard coding systems.
;;    %Z -- like %z, but including the end-of-line format.
;;    %[ -- print one [ for each recursive editing level.  %] similar.
;;    %% -- print %.   %- -- print infinitely many dashes.
;;  Decimal digits after the % specify field width to which to pad.
(setq frame-title-format '(buffer-file-name "emacs: %b (%f)" "emacs: %b"))

;; =================================================================
;; Font selection (to use a mono-spaced (non-proportional) font)
;; =================================================================
;; Snow Leopard users may try Menlo-12, other should consider Monaco-12.
(add-to-list 'default-frame-alist '(font . "Monaco-12"))

;; =================================================================
;; Powerline Status Bar
;; =================================================================
;; See https://github.com/milkypostman/powerline
;; inspired by [vim-powerline](https://github.com/Lokaltog/vim-powerline).
(use-package powerline)
(powerline-center-theme)


;; =================================================================
;; Emacs Color Theme
;; see http://www.emacswiki.org/emacs/ColorTheme
;; see http://code.google.com/p/gnuemacscolorthemetest/ For direct
;; screenshots
;; =================================================================
;; WITH color theme
(use-package color-theme
  :init
  (progn
	;; clean color-theme-libraries
	;;
	;; (message
	;; 	  (remove-if-not #'(lambda(line) (string-match "\\.el" line))
	;; 					 '(list color-theme-libraries)))
	;; Personnal Hotfix - srry
	(message (concat "****elpa package : "  (package--dir "elpa" "20080305.34/")))
	(color-theme-initialize)
	(setq color-theme-is-global t)
	(color-theme-vim-colors)))


;; === To better see the cursor ===
(setq default-frame-alist
      '((cursor-color . "green")
        (cursor-type . box)))
(set-default 'cursor-type 'box)

;; === See the end of the file ===
(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))

;; See also trailing whitespace
;;(setq-default show-trailing-whitespace t)

;; === Auto fit the size of the frame to the buffer content ===
;; see http://www.emacswiki.org/emacs/Shrink-Wrapping_Frames
;; run 'M-x fit-frame' for that
;;(require 'fit-frame)
;;(add-hook 'after-make-frame-functions 'fit-frame)


;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/easypg.el
;; -*- mode: lisp; -*-
;; 
;; =======================================
;; === Auto Encryption (with GPG etc.) ===
;; =======================================
;; See http://www.emacswiki.org/emacs/EasyPG
(if (equal emacs-major-version 23)
 (require 'epa-setup))

;;(require 'epa-file)
;; (use-package epa-file
;;   :init
;;   (progn
;; 	(epa-file-enable)))

(epa-file-enable)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/ecb.el
;; -*- mode: lisp; -*-
;; Time-stamp: <Sam 2014-10-04 11:46 svarrette>
;; ----------------------------------------------------------------------

;; --------------------------------
;; === ECB (Emacs Code Browser) ===
;; see http://ecb.sourceforge.net/
;; or  http://www.emacswiki.org/emacs/EmacsCodeBrowser
;; or  http://www.emacswiki.org/emacs/PracticalECB
(require 'ecb)
;;(require 'ecb-autoloads)

;; ;; /!\ Caution on ECB variable configuration
;; ;; see http://ecb.sourceforge.net/docs/setq-or-customize.html#setq-or-customize 
;; ;; for the options that shouldn't be configured via setq ;(

;; --- Annoyances
;; use the primary button to navigate in the source tree -- middle button otherwise (!?!)
(setq ecb-primary-secondary-mouse-buttons (quote mouse-1--mouse-2))
(setq ecb-show-sources-in-directories-buffer 'always)
(setq ecb-tip-of-the-day nil)           ; disable tips of the day
(setq ecb-version-check nil)			; to prevent ecb failing to start up

(setq ecb-history-sort-method nil)	 ; No sorting, means the most recently used
										; buffers are on the top of the history
                                        ; and the seldom used buffers at the bottom
;; (setq ecb-vc-enable-support t)          ; show versionning status of the files
;;                                         ; in the sources/hstory (SVN etc.)
;; ;; autostart ECB on emacs startup (put to nil to desactivate)
;; ;;(setq ecb-auto-activate t)

;;(setq ecb-compile-window-height 12)


;; --- ECB layout ----
(setq ecb-create-layout-file (get-conf-path ".ecb-falkor-layout.el")) ; where my layout are saved
(setq ecb-windows-width 37)
(setq ecb-layout-name "falkor")

;; The "falkor" layout is as follows:
;; +------+-------+--------------------------------------+
;; |              |                                      |
;; |              |                                      |
;; | Directories  |                                      |
;; |              |                                      |
;; +--------------|          Edit                        |
;; |   History    |                                      |
;; |              |                                      |
;; +------+-------+                                      |
;; |              |                                      |
;; |   Methods    |                                      |
;; |              |                                      |
;; +-----------------------------------------------------+

;; You can easily create your own layout using M-x ecb-create-new-layout
;; see ~/emacs.d/custom.el for the configuration of my own layout




;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/expand-region.el
;; -*- mode: lisp; -*-
;; Time-stamp: <Mer 2014-09-24 23:12 svarrette>
;; ===============================================
;; Expand region increases the selected region by semantic units.

(use-package expand-region
  :bind (("C-@" . er/expand-region)
		 ("C-=" . er/contract-region)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/filladapt.el
;; -*- mode: lisp; auto-fill-mode;  -*-
;; =============================================
;; Activate fill adapt
;; see http://www.emacswiki.org/emacs/FillAdapt
;; =============================================

;;(require 'filladapt)
(use-package filladapt
  :init
  (progn
    (setq-default filladapt-mode nil)
    (cond ((equal mode-name "Change Log")
           t)
          (t
           (turn-on-filladapt-mode)))))


;; turn on filladapt mode everywhere but in ChangeLog files

;; (add-hook 'c-mode-common-hook
;;    (lambda ()
;;      (when (featurep 'filladapt)
;;        (c-setup-filladapt))))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/framegeometry.el
;; framegeometry.el
;; use to restore the frame size of last session
;; Courtesy from http://ck.kennt-wayne.de/2011/jul/emacs-restore-last-frame-size-on-startup

(defun save-framegeometry ()
  "Gets the current frame's geometry and saves to ~/.emacs.d/.framegeometry."
  (let (
        (framegeometry-left (frame-parameter (selected-frame) 'left))
        (framegeometry-top (frame-parameter (selected-frame) 'top))
        (framegeometry-width (frame-parameter (selected-frame) 'width))
        (framegeometry-height (frame-parameter (selected-frame) 'height))
        (framegeometry-file (expand-file-name "~/.emacs.d/.framegeometry"))
        )

    (with-temp-buffer
      (insert
       ";;; This is the previous emacs frame's geometry.\n"
       ";;; Last generated " (current-time-string) ".\n"
       "(setq initial-frame-alist\n"
       "      '(\n"
       (format "        (top . %d)\n" (max framegeometry-top 0))
       (format "        (left . %d)\n" (max framegeometry-left 0))
       (format "        (width . %d)\n" (max framegeometry-width 0))
       (format "        (height . %d)))\n" (max framegeometry-height 0)))
      (when (file-writable-p framegeometry-file)
        (write-file framegeometry-file))))
  )

(defun load-framegeometry ()
  "Loads ~/.emacs.d/.framegeometry which should load the previous frame's geometry."
  (let ((framegeometry-file (expand-file-name "~/.emacs.d/.framegeometry")))
    (when (file-readable-p framegeometry-file)
      (load-file framegeometry-file)))
  )

;; Special work to do ONLY when there is a window system being used
(if window-system
    (progn
      (add-hook 'after-init-hook 'load-framegeometry)
      (add-hook 'kill-emacs-hook 'save-framegeometry))
  )

;; eof
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/global.el
;; Global configuration

;; Add menu bar
(menu-bar-mode   t)

(setq search-highlight         t)       ; highlight search object
(setq query-replace-highlight  t)       ; highlight query object
(setq byte-compile-verbose     t)
(setq initial-major-mode 'text-mode)    ; to avoid autoloads for lisp mode
(setq require-final-newline t)          ; ensure a file ends in a newline when it

;; Increase the lisp interpretor depth 
;;(setq max-lisp-eval-depth 10000)


;; Automatically fill comment
;; Bug on Latex mode
;; (setq comment-auto-fill-only-comments t)

;; Correct copy-paste to clipboard
(setq x-select-enable-clipboard t)
;; after mouse selection in X11, you can paste by `yank' in emacs
;;(Setq x-select-enable-primary t)
(setq mouse-drag-copy-region  t)

;; Technomancy better defaults -- see https://github.com/technomancy/better-defaults
;;(require 'better-defaults)
(use-package better-defaults)

;; Finding Files (and URLs) At Point (FFAP)
;; see http://www.gnu.org/software/emacs/manual/html_node/emacs/FFAP.html
;;(require 'ffap)
(use-package ffap)


;; Unique buffer names dependent on file name
;;(require 'uniquify)
(use-package uniquify)

;; style used for uniquifying buffer names with parts of directory name
(setq uniquify-buffer-name-style 'forward)

;;(require 'ansi-color)
(use-package ansi-color)

;; === Sane defaults configurations ===

;; Allow pasting selection outside of Emacs
(setq x-select-enable-clipboard t)

;; Auto refresh buffers
(global-auto-revert-mode 1)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; Show keystrokes in progress
(setq echo-keystrokes 0.1)

;; Move files to trash when deleting
(setq delete-by-moving-to-trash t)

;; Transparently open compressed files
(auto-compression-mode t)


;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; UTF-8 please
(setq locale-coding-system    'utf-8) ; pretty
(set-terminal-coding-system   'utf-8) ; pretty
(set-keyboard-coding-system   'utf-8) ; pretty
(set-selection-coding-system  'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top

;; Show active region
(transient-mark-mode 1)
(make-variable-buffer-local 'transient-mark-mode)
(put 'transient-mark-mode 'permanent-local t)
(setq-default transient-mark-mode t)

;; Remove text in active region if inserting text
(delete-selection-mode 1)

;; Don't highlight matches with jump-char - it's distracting
(setq jump-char-lazy-highlight-face nil)

;; === Auto-fill  / visual-line configuration ===
;; automatic wrapping of lines and insertion of newlines when the cursor
;; goes over the column limit.
(setq-default fill-column 80)
;;(setq auto-fill-mode t)                 ; activate by default

;;Finally, visual-line-mode is so much better than auto-fill-mode. It doesn't
;;actually break the text into multiple lines - it only looks that way.  
(remove-hook 'text-mode-hook #'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)

;; Undo/redo window configuration with C-c <left>/<right>
(winner-mode 1)

;; Never insert tabs
(set-default 'indent-tabs-mode nil)

;; Show me empty lines after buffer end
(set-default 'indicate-empty-lines t)

;; Easily navigate sillycased words
(global-subword-mode 1)

;; break lines for me, please
(setq-default truncate-lines nil)

;; Keep cursor away from edges when scrolling up/down
;;(require 'smooth-scrolling)

;; Allow recursive minibuffers
(setq enable-recursive-minibuffers t)

;; Don't be so stingy on the memory, we have lots now. It's the distant future.
(setq gc-cons-threshold 20000000)

;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
(setq org-replace-disputed-keys t)

;; Fontify org-mode code blocks
(setq org-src-fontify-natively t)

;; Represent undo-history as an actual tree (visualize with C-x u)
;; (setq undo-tree-mode-lighter "")
;; (require 'undo-tree)
;; (global-undo-tree-mode)

;; Sentences do not need double spaces to end. Period.
(set-default 'sentence-end-double-space nil)

;; A saner ediff
(setq ediff-diff-options "-w")
(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; Nic says eval-expression-print-level needs to be set to nil (turned off) so
;; that you can always see what's happening.
(setq eval-expression-print-level nil)

;; When popping the mark, continue popping until the cursor actually moves
;; Also, if the last command was a copy - skip past all the expand-region cruft.
(defadvice pop-to-mark-command (around ensure-new-position activate)
  (let ((p (point)))
    (when (eq last-command 'save-region-or-current-line)
      ad-do-it
      ad-do-it
      ad-do-it)
    (dotimes (i 10)
      (when (= p (point)) ad-do-it))))



;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/guide-key.el
;; -*- mode: lisp; -*-
;; ----------------------------------------------------------------------
;; File: guide-key.el - Guide key usage
;; Time-stamp: <Lun 2014-11-17 16:43 svarrette>
;;
;; Copyright (c) 2014 Sebastien Varrette <Sebastien.Varrette@uni.lu>
;; .             see https://github.com/kai2nenobu/guide-key
;; ----------------------------------------------------------------------



;; It's hard to remember keyboard shortcuts. The guide-key package pops up help after a short delay.
(use-package guide-key
  :init
  (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c" "C-c r"))
  (setq guide-key/popup-window-position "bottom")
  (setq guide-key/idle-delay 0.1)
  (use-package guide-key-tip
	:config (setq guide-key-tip/enabled t))
  (guide-key-mode 1))  ; Enable guide-key-mode
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/hotfix-x-popup.el
;; -*- mode: lisp; -*-
;; Time-stamp: <Mer 2014-09-17 21:52 svarrette>
;;
;; hotfix-x-popup.el - Hotfix on emacs popup dialogs on Mac OS X that freeze
;; see http://superuser.com/questions/125569/how-to-fix-emacs-popup-dialogs-on-mac-os-x
;; ----------------------------------------------------------------------

(when is-mac
  (defadvice yes-or-no-p (around prevent-dialog activate)
    "Prevent yes-or-no-p from activating a dialog"
    (let ((use-dialog-box nil))
      ad-do-it))
  (defadvice y-or-n-p (around prevent-dialog-yorn activate)
    "Prevent y-or-n-p from activating a dialog"
    (let ((use-dialog-box nil))
      ad-do-it)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/indent.el
;; -*- mode: lisp; -*-

;;
;; Helper functions 
;;
;; === Indentation of the full buffer ===
;; Courtesy from http://emacsblog.org/2007/01/17/indent-whole-buffer/
(defun indent-buffer ()
  "indent whole buffer"
  (interactive)
  (save-excursion
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max))))

;; === Yank (copy) and indent the copied region
;; see http://www.emacswiki.org/emacs/AutoIndentation
(defun yank-and-indent ()
  "Yank and then indent the newly formed region according to mode."
  (interactive)
  (yank)
  (call-interactively 'indent-region))

;; ;; === unindent ===
;; (defun unindent-region ()
;;   (interactive)
;;   (save-excursion
;; 	(if (< (point) (mark)) (exchange-point-and-mark))
;; 	(let ((save-mark (mark)))
;; 	  (if (= (point) (line-beginning-position)) (previous-line 1))
;; 	  (goto-char (line-beginning-position))
;; 	  (while (>= (point) save-mark)
;; 		(goto-char (line-beginning-position))
;; 		(if (= (string-to-char "\t") (char-after (point))) (delete-char 1))
;; 		(previous-line 1)))))


;; ==================== Let's go ====================

;; === Indenting configuration ===
;; see http://www.emacswiki.org/emacs/IndentationBasics
(setq-default tab-width 2)
(defvaralias 'c-basic-offset 	 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

;; === Show whitespaces/tabs etc. ===
(setq x-stretch-cursor t)

;; === Get ride of tabs most of the time ===
(setq-default indent-tabs-mode nil)     ; indentation can't insert tabs

(setq-default c-basic-offset 4
              tab-width 4
              indent-tabs-mode t)

;; === enable automatic indentation ===
(electric-indent-mode 1)


;; (setq c-brace-offset -2)
;;(setq c-auto-newline t)

;; (add-hook 'c-mode-common-hook (lambda () (setq c-basic-offset 4)))
;; (add-hook 'c-mode-common-hook (lambda () (setq c-recognize-knr-p nil)))
;; (add-hook 'ada-mode-hook (lambda ()      (setq ada-indent 4)))
;; (add-hook 'perl-mode-hook (lambda ()     (setq perl-basic-offset 4)))
;; (add-hook 'cperl-mode-hook (lambda ()    (setq cperl-indent-level 4)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/ispell.el
;; -*- mode: lisp; -*-

;; LaTeX-sensitive spell checking
(setq ispell-enable-tex-parser t)

;; defautl dictionnary
(setq ispell-local-dictionary "en")

;; save the personal dictionary without confirmation
(setq ispell-silently-savep t)

;; enable the likeness criteria
;;(setq flyspell-sort-corrections nil)

;; dash character (`-') is considered as a word delimiter
;;(setq flyspell-consider-dash-as-word-delimiter-flag t)

;; Add flyspell to the following major modes
(dolist (hook '(text-mode-hook html-mode-hook messsage-mode-hook))
  (add-hook hook (lambda ()
                   (flyspell-mode t))))

;; disable flyspell in change log and log-edit mode that derives from text-mode
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode nil))))

;; flyspell comments and strings in programming modes
;; (preventing it from finding mistakes in the code)
(dolist (hook '(autoconf-mode-hook autotest-mode-hook c++-mode-hook c-mode-hook cperl-mode-hook  emacs-lisp-mode-hook makefile-mode-hook nxml-mode-hook python-mode-hook
                                   sh-mode-hook))
  (add-hook hook 'flyspell-prog-mode))

(eval-after-load "flyspell" '(progn
  (define-key flyspell-mouse-map (kbd "<C-down-mouse-3>") #'flyspell-correct-word)
  (define-key flyspell-mouse-map (kbd "<C-mouse-3>") 'undefined) ))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/magit.el
;; -*- mode: lisp; -*-
;; Time-stamp: <Ven 2014-09-26 12:51 svarrette>
;; ----------------------------------------------------------------------
;; Magit management

(use-package magit
  :config
  (progn
	;; (set-face-background 'magit-item-highlight "#121212")
	;; (set-face-background 'diff-file-header "#121212")
	;; (set-face-foreground 'diff-context "#666666")
	;; (set-face-foreground 'diff-added "#00cc33")
	;; (set-face-foreground 'diff-removed "#ff0000")
	;;
	(setq magit-stage-all-confirm   nil)
	(setq magit-unstage-all-confirm nil)
	;;
	(setq magit-restore-window-configuration t)
	;; commit management
	(setq magit-commit-signoff                 t)
	(setq magit-commit-ask-to-stage            nil) ; do not ask to stage all
	(setq magit-commit-all-when-nothing-staged t)
	)
  :bind ("C-x g" . magit-status))

(use-package magit-gitflow
  :config
  (progn
	(add-hook 'magit-mode-hook 'turn-on-magit-gitflow)))


;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/neotree.el
;; ----------------------------------------------------------------------
;; File: neotree.el - NerdTree like 
;; Time-stamp: <Mer 2014-09-24 12:12 svarrette>
;; ----------------------------------------------------------------------
;; see http://www.emacswiki.org/emacs/NeoTree

(require 'find-file-in-project)

(defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (ffip-project-root))
          (file-name   (buffer-file-name)))
      (if project-dir
          (progn
            (neotree-dir project-dir)
            (neotree-find file-name))
        (message "Could not find git project root."))))

(use-package neotree
  :commands ( neo-buffer--unlock-width  neo-buffer--lock-width)
  :bind ("<f1>" . neotree-project-dir))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/parenthesis.el
;; === Show matching parenthesis ===
(require 'paren)
(GNUEmacs
 (show-paren-mode t)
 (setq show-paren-ring-bell-on-mismatch t))
(XEmacs
 (paren-set-mode 'paren))

(setq show-paren-style 'expression)
(set-face-background 'show-paren-match-face "turquoise")
;; (set-face-attribute 'show-paren-match-face nil 
;;                     :weight 'bold :underline nil :overline nil :slant 'normal)
(set-face-foreground 'show-paren-mismatch-face "red") 
(set-face-attribute 'show-paren-mismatch-face nil 
                    :weight 'bold :underline t :overline nil :slant 'normal)


;; show matching parenthesis, even if found outside the present screen.
;; see http://www.emacswiki.org/emacs/MicParen
;; (require 'mic-paren)                    ; loading
;; (paren-activate)                        ; activating
(use-package mic-paren
  :init
  (progn
	(paren-activate)))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/projectile.el
;; -*- mode: lisp; -*-
;; ----------------------------------------------------------------------
;; File: projectile.el - Manage projects via projectile
;; Time-stamp: <Lun 2014-11-17 16:37 svarrette>
;;
;; Copyright (c) 2014 Sebastien Varrette <Sebastien.Varrette@uni.lu>
;; ----------------------------------------------------------------------


(setq projectile-keymap-prefix (kbd "C-c p"))

(use-package projectile
  :init
  (progn
    (setq projectile-cache-file (get-conf-path ".projectile.cache"))
    (setq projectile-known-projects-file (get-conf-path ".projectile-bookmarks.eld")))
  :config
  (progn
    (projectile-global-mode t)
    (setq projectile-enable-caching t)
    ;;(setq projectile-require-project-root nil)
    (setq projectile-completion-system 'default)
    ;;(setq projectile-completion-system 'ido)
    ;;(setq projectile-switch-project-action 'projectile-dired)
    ;;(setq projectile-switch-project-action 'projectile-find-dir)
    (setq projectile-switch-project-action 'projectile-find-file)
    (add-to-list 'projectile-globally-ignored-files
                 ".DS_Store")))

(use-package helm-projectile
  :config (setq projectile-completion-system 'helm)
  :bind (("C-c p h" . helm-projectile)
         ("C-x C-p" . helm-projectile)))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/recentf.el
;; === Recentf mode ===
;; see http://www.emacswiki.org/emacs/RecentFiles
;; A minor mode that builds a list of recently opened files
;;(require 'recentf)
(use-package recentf
  :config
  (progn
    ;;  file to save the recent list into
    (setq recentf-save-file "~/.emacs.d/.recentf")
    ;; maximum number of items in the recentf menu
    (setq recentf-max-menu-items 40)

    ;; save file names relative to my current home directory
    (setq recentf-filename-handlers '(abbreviate-file-name))

    (recentf-mode t)                        ; activate it
    ))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/saveplace.el
;; -*- mode: lisp; -*-
;; Time-stamp: <Ven 2014-09-26 11:41 svarrette>
;; -------------------------------------------------------------------------
;; Saving Emacs Sessions (cursor position etc. in a previously visited file)
(use-package saveplace
  :init
  (progn
	(setq-default save-place t)
	(setq save-place-file (get-conf-path ".saved-places"))
))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/time-stamp.el
;; -*- mode:lisp; -*-
;; === Maintain last change time stamps (via Time-stamp: <Dim 2014-09-21 09:21 svarrette>) ===
;;(require 'time-stamp)
(use-package time-stamp
  :init
  (progn
	;; format of the string inserted by `M-x time-stamp'
	(setq time-stamp-format "%3a %:y-%02m-%02d %02H:%02M %u")
                                        ; `Weekday YYYY-MM-DD HH:MM USER'

	;; update time stamps every time you save a buffer
	(add-hook 'write-file-hooks 'time-stamp)))


;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/user.el
;; User configuration / Identity
(setq user-full-name    "Sebastien Varrette")
(setq user-mail-address "<Sebastien.Varrette@uni.lu>")
(setq user-www          "http://varrette.gforge.uni.lu")
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/general_settings/yasnippets.el
;; -*- mode: lisp; -*-
;; ----------------------------------------------------------------------
;; File: yasnippets.el - Yasnippet -- et Another Snippet extension for Emacs.
;; Time-stamp: <Lun 2014-11-17 16:32 svarrette>
;;
;; Copyright (c) 2014 Sebastien Varrette <Sebastien.Varrette@uni.lu>
;; ----------------------------------------------------------------------

;; === Yasnippet ===
;; Templates using Yasnippet: Yet Another Snippet extension for Emacs.
;; see http://www.emacswiki.org/emacs/Yasnippet and http://yasnippet.googlecode.com
;; Installation notes: see README

(use-package yasnippet
  :if (not noninteractive)
  :diminish yas-minor-mode
  :commands (yas-minor-mode yas-expand yas-new-snippet yas-find-snippets yas-reload-all yas-visit-snippet-file)
  :mode ("/\\.emacs\\.d/snippets/" . snippet-mode)
  :init
  (hook-into-modes #'(lambda () (yas-minor-mode 1))
                   '(prog-mode-hook
                     text-mode-hook
                     org-mode-hook
                     ruby-mode-hook
                     message-mode-hook))
  :config
  (progn
    (setq yas-verbosity 0)
    (bind-keys :map yas-minor-mode-map
			   ("<tab>"      . nil)  ; unbind tab
			   ("TAB"        . nil)  ; idem
               ("M-<return>" . yas-expand)
               ;; ("M-<return>" . yas-expand)
               ("C-c y n"    . yas-new-snippet)
               ("C-c y f"    . yas-find-snippets)
               ("C-c y r"    . yas-reload-all)
               ("C-c y v"    . yas-visit-snippet-file)
               )
    ;; ;; Hotfix for conflicts between yasnippet and smart-tab
    ;; ;; see https://github.com/haxney/smart-tab/issues/1
    ;; (add-to-list 'hippie-expand-try-functions-list
    ;;              'yas/hippie-try-expand) ;put yasnippet in hippie-expansion list
    )
  :idle
  (progn
    (yas-reload-all)
	))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/bindings/global.el
;; ----------------------------------------------------------------------
;; File: bindings/global.el - setup my gloabl key bindings in emacs
;;       Part of my emacs configuration (see ~/.emacs or init.el)
;;
;; Creation:  08 Jan 2010
;; Time-stamp: <Lun 2014-11-17 16:44 svarrette>
;;
;; Copyright (c) 2010-2014 Sebastien Varrette <Sebastien.Varrette@uni.lu>
;;               http://varrette.gforge.uni.lu
;;
;; More information about Emacs Lisp:
;;              http://www.emacswiki.org/emacs/EmacsLisp
;; ----------------------------------------------------------------------
;; This file is NOT part of GNU Emacs.
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;; ----------------------------------------------------------------------
(require 'use-package)

;; === Always indent on return ===
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-j") 'comment-indent-new-line) ;to reverse the normal binding

;; === expand etc. ===
(global-set-key (kbd "M-=") 'hippie-expand)
;; see also autocomplete.el and yasnippet.el

;; === join the following line onto the current one ===
;; tips from http://whattheemacsd.com/
(global-set-key (kbd "M-j")
            (lambda ()
                  (interactive)
                  (join-line -1)))

;; === Open files ===
;; Use helm to open files in various context
;; see config/modes/helm.el
;;   "C-c h"   . helm-mini
;;   "M-x"     . helm-M-x
;;   "C-x C-f" . helm-find-files
;;   "C-x C-r" . helm-recentf
;;   "C-x C-g" . helm-do-grep
;;   "C-x C-p" . helm-projectile

;; === Another comment binding (also M-;) ===
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)

;; === Selection ===
;; Using [expand-region](https://github.com/magnars/expand-region.el)
;; see general_settings/expand-region.el
;;  "C-@"  'er/expand-region
;;	"C-="  'er/contract-region
;;
;; Rectangular selection - C-SPC being tacken by Alfred, C-<return> by yasnippet ;)
(setq cua-rectangle-mark-key (kbd "C-S-<return>"))
(cua-selection-mode 1)


;; Select full buffer: Put mark at end of page, point at beginning.
(global-set-key (kbd "M-a") 'mark-page)

;; === Magit stuff ===
;; see general_settings/magit.el
;; "C-x g" . magit-status

;; === Buffer switching ===
;; C-x b permits to switch among the buffer by entering a buffer name,
;; with completion.
;; See http://www.emacswiki.org/emacs/IswitchBuffers
(require 'iswitchb)
(iswitchb-mode t)
;; to ignore the *...* special buffers from the list
(setq iswitchb-buffer-ignore '("^ " "*Buffer"))

;; Move from one buffer to another using 'C-<' and 'C->'
;;(load "cyclebuffer" nil 't)
;;(global-set-key (kbd "C-<") 'cyclebuffer-forward)
;;(global-set-key (kbd "C->") 'cyclebuffer-backward)
(global-set-key (kbd "C-<") 'previous-buffer)
(global-set-key (kbd "C->") 'next-buffer)

;; === Window switching ===
(global-set-key [C-prior] 'other-window)
(global-set-key [C-next]  'other-window)

;; === Font size ===
;; I may prefer C-+ and C-- for window enlarge/schrink
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)

;; === Fullscreen (starting Mac OS X Lion) ===
(when is-mac
  (global-set-key (kbd "C-M-f") 'ns-toggle-fullscreen))
;;(define-key global-map "\C-\M-f" 'ns-toggle-fullscreen)


;; === Multi speed mouse scrolling ===
;; scroll:         normal speed
;; Ctrl + scroll:  high speed
;; Shift + scroll: low  speed
(defun up-slightly () (interactive) (scroll-up 5))
(defun down-slightly () (interactive) (scroll-down 5))
(global-set-key [mouse-4] 'down-slightly)
(global-set-key [mouse-5] 'up-slightly)

(defun up-one () (interactive) (scroll-up 1))
(defun down-one () (interactive) (scroll-down 1))
(global-set-key [S-mouse-4] 'down-one)
(global-set-key [S-mouse-5] 'up-one)

(defun up-a-lot () (interactive) (scroll-up))
(defun down-a-lot () (interactive) (scroll-down))
(global-set-key [C-mouse-4] 'down-a-lot)
(global-set-key [C-mouse-5] 'up-a-lot)

;; === Navigation ===
(global-set-key [kp-home]  'beginning-of-buffer) ; [Home]
(global-set-key [home]     'beginning-of-buffer) ; [Home]
(global-set-key [kp-end]   'end-of-buffer)       ; [End]
(global-set-key [end]      'end-of-buffer)       ; [End]

;; goto next error (raised in the compilation buffer typically)
(global-set-key (kbd "C-x n") 'next-error)
(global-set-key (kbd "C-x p") 'previous-error)

(global-set-key (kbd "M-n") 'goto-line)          ; goto line number

;; === ECB / NerdTree like ===
;; see general_settings/neotree.el
;; Normally:
;; F1: open neotree at the git root dir
;; F2: toggle ECB

;; (use-package  neotree
;; 			  :bind "f1" 'neotree-toggle)
;; (require 'neotree)
;; (require 'find-file-in-project)
;; (global-set-key [(f1)] 'neotree-project-dir) ; open neotree at the git root dir
(global-set-key [(f2)] 'ecb-toggle) ; Activate ECB 

;; === Shell pop ===
(global-set-key [(f3)]     'shell-pop)

;; Speedbar

                                        ;(global-set-key [(f4)] 'speedbar-get-focus)      ; jump to speedbar frame
;;(require 'sr-speedbar)
;;(speedbar 1)

;; (global-set-key [(f4)] 'sr-speedbar-toggle)       ; jump to speedbar frame

;; find matching parenthesis (% command in vim: Go to the matching parenthesis,
;; if on parenthesis; otherwise, insert '%')
;; see ~/.emacs.d/init-defuns.el
;; in practice, it's annoying when writing a C code with printf format so I
;; decided to rebind it to something different that '%'
(global-set-key (kbd "C-c C-p") 'match-paren)

;; Jump to a definition in the current file. (This is awesome.)
(global-set-key (kbd "C-x C-i") 'ido-imenu)

;; === Compilation ===
;; see modes/compile.el
;; bind ("C-x C-e" . smart-compile))

;;(global-set-key (kbd "C-x C-e") 'smart-compile)
;;(define-key ruby-mode-map [remap ruby-send-last-sexp ] nil)

;; === Kill this buffer ===
(global-set-key (kbd "C-q") 'kill-this-buffer)

;; === Launch a shell ===
(global-set-key (kbd "C-!") 'shell)

;; === Re-indent the full file (quite useful) ===
(global-set-key (kbd "C-c i") 'indent-buffer)   ;
(global-set-key (kbd "C-c n") 'cleanup-buffer)  ;



;; === yank and indent copied region ===
(global-set-key (kbd "M-v")  'yank-and-indent)


;; === Search [and replace] ===
                                        ; Use regex searches by default.
(global-set-key (kbd "C-s")   'isearch-forward)
(global-set-key (kbd "\C-r")  'isearch-backward)
(global-set-key (kbd "C-M-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-M-r") 'isearch-backward-regexp)
(global-set-key (kbd "M-q")   'query-replace)


;; === Instant messaging ===
;; see http://www.emacswiki.org/emacs/CategoryChatClient
;; TO BE TRIED LATER
                                        ;(global-set-key (kbd "C-c j") (lambda () (interactive) (switch-or-start 'jabber-connect "*-jabber-*")))
                                        ;(global-set-key (kbd "C-c M-j") 'jabber-disconnect)

                                        ;(global-set-key (kbd "C-c i")
                                        ;               (lambda () (interactive)
                                        ;                 (switch-or-start (lambda () (rcirc-connect "irc.freenode.net"))
                                        ;                                  "*irc.freenode.net*")))


;; === Emacs Org ===
;; An Emacs Mode for Notes, Project Planning, and Authoring
;; see http://www.emacswiki.org/emacs/OrgMode
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

;; === Flyspell ===
(use-package ispell
             :bind (("C-c C-i c" . ispell-comments-and-strings)
                    ("C-c C-i d" . ispell-change-dictionary)
                    ("C-c C-i k" . ispell-kill-ispell)
                    ("C-c C-i m" . ispell-message)
                    ("C-c C-i r" . ispell-region)))

(use-package flyspell
             :bind (("C-c C-i b" . flyspell-buffer)
                    ("C-c C-i f" . flyspell-mode))
             :config
             (define-key flyspell-mode-map [(control ?.)] nil))

;; === Yasnippet ===
;; see config/modes/yasnippets for the setup
;; Normally bind to C-RET and M-RET








;; ===============================
;;  BINDINGS INDUCED BY SUB-MODES
;; ===============================

;; * comment and uncomment a region in a buffer is done via 'M-;'

;; * LaTeX-mode: see AucTeX manual.
;;   Some additionnal notes:
;;   - make a LaTeX reference (to a label) by pressing `C-c )'
;;   - insert a label by pressing `C-c (' (or `C-('
;;   - insert a citation by pressing `C-c [' (or `C-['
;;   - hit `C-c ='; the buffer will split into 2 and in the top half you
;;     will see a TOC, hitting `l' there will show all the labels and cites.
;;   - M-<ret> invoke a template from Yasnippet
;;   - C-<ref> insert a \item

;; * C-x d    open dired (for directory browsing), see ~/.emacs.d/dired-refcard.gnu.pdf
;;            Note: I bind 'p' once on a file to run the 'open' command on this file
;;            See ~/.emacs.d/init-emodes.el (section Dired)

;; * SVN: see menu Tools/Version Control (C-x v v to commit for instance)

;; * GIT (i.e. magit): see ~/.emacs.d/init-emodes.el

;; * Programming stuff:
;;   Most useful:
;;    - 'C-t C-t' to invoke a template from tempo (see ~/.emacs.d/tempo-c-cpp.el)
;;    - 'M-<ret>' to invoke a template from Yasnippet (see ~/.emacs.d/init-emodes.el)
;;    - 'C-<ret>' to invoke semantic menu (see ~/.emacs.d/init-cedet.el)

;; * CEDET: see ~/.emacs.d/init-cedet.el

;; * nxHtml: see ~/.emacs.d/init-emodes.el, in particular C-<ret> is bind in
;;  this case to popup the complete-tag menu very useful when editing some
;;  [x]html file





;;(provide 'init-bindings)
;; ----------------------------------------------------------------------
;; eof
;;
;; Local Variables:
;; mode: lisp
;; End:
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/bindings/mac.el
;; Special configuration for Mac 

;; (Aquamacs
(when is-mac
  (setq
   ns-command-modifier 'meta         ; Apple/Command key is Meta
   ns-alternate-modifier nil         ; Option is the Mac Option key
   ;;ns-use-mac-modifier-symbols  nil  ; display standard Emacs (and not standard Mac) modifier symbols)
   ))

;;  (require 'redo)
;;  (require 'mac-key-mode)
;;  (mac-key-mode 1)
;;  (setq
;;   ns-command-modifier 'meta         ; Apple/Command key is Meta
;;   ns-alternate-modifier nil         ; Option is the Mac Option key
;;   ;;ns-use-mac-modifier-symbols  nil  ; display standard Emacs (and not standard Mac) modifier symbols)
;;   )
;;  )
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/bindings/ruby.el
;; -*- mode: lisp; -*-

(eval-after-load 'ruby-mode
  '(progn
	 (define-key ruby-mode-map (kbd "C-c t") 'ruby-jump-to-other)))
;; ############################################################################


;; ~/.emacs.d/config.el ends here
